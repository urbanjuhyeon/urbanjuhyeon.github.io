---
title: "한국어 감성 분석 비교: 네이버 vs 구글"
description: |
  대표적인 한국어 감성 분석 API를 제공하는 구글과 네이버 성능 비교
date: "2023-04-19"
categories: [R]
image: "image/plot_conf_mat_naver.png"
---

# 들어가기

한국어 자연어 처리에서 감성 분석 서비스를 하는 구글과 네이버의 성능을 비교한다. 

------------------------------------------------------------------------

# 1. 데이터 준비하기

분석에 필요할 패키지를 불러온다.

```{r}
pacman::p_load(
  "tidyverse",  "tidytext", "data.table", "knitr", "gt", "scales", "cvms", "DT",
  "httr", "jsonlite", "future", "furrr")
```

분석에 쓸 데이터를 [여기](data/sample.csv)에서 다운 받아 불러온다.

```{r}
db_sent_1a <- fread('data/sample.csv')
```

데이터는 구글 리뷰 문장(sent_content)을 긍정과 중립, 부정으로 라벨링(label)하고 구글 자연어 처리의 감성분석 점수(score)로 구성된다.

```{r, echo = FALSE}
db_sent_1a %>% slice(1, 8, 23) %>% kable()
```

위 데이터에서 긍정과 중립, 부정을 각각 200개씩 무작위로 샘플링한다.

```{r}
set.seed(777) # 난수 고정

db_sent_1b <- db_sent_1a %>% 
  group_by(label) %>% 
  sample_n(200) %>% ungroup() %>%
  arrange(label) %>%
  mutate(id = row_number())
```

# 2. 감성분석

## 2.1. 네이버 감성분석

### 감성분석 준비

CLOVA Sentiment 서비스 설명과 가이드라인은 [여기](https://medium.com/naver-cloud-platform/%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%84%B8%EC%9A%94-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B0%90%EC%A0%95-%EB%B6%84%EC%84%9D-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-clova-sentiment-%ED%99%9C%EC%9A%A9%EA%B8%B0-5d9db7b0209b)에서 볼 수 있다. 콘솔 접속과 서비스 활성화, 인증정보 등을 따라하면 된다.

### R을 활용한 네이버 감성분석

아래 코드로 할당받은 네이버 감성분석 API를 활용하여 샘플 데이터를 감성분석한다.

```{r, eval = FALSE}
# Define API endpoint and headers
url <- "https://naveropenapi.apigw.ntruss.com/sentiment-analysis/v1/analyze"
client_id = ""     # 할당된 클라이언트 ID
client_secret = "" # 할당된 API key

headers_user <- c(
  "X-NCP-APIGW-API-KEY-ID" = client_id,
  "X-NCP-APIGW-API-KEY" = client_secret,
  "Content-Type" = "application/json"
)

db_sent_1c <- db_sent_1b %>%
  group_split(id)


db_sent_2a <- rbindlist(
  future_map(db_sent_1c, function(x){
    
    sent_content_input <- x$sent_content
    
    seti_analysis_respon <- POST(
      url = "https://naveropenapi.apigw.ntruss.com/sentiment-analysis/v1/analyze",
      body = toJSON(list(content = sent_content_input) , auto_unbox = TRUE, pretty = TRUE), 
      add_headers(.headers = headers_user),
      encode = "json") %>% 
      content()
    
    doc_dt <- data.table(
      doc_content = sent_content_input,
      doc_senti = seti_analysis_respon$document$sentiment,
      doc_confi_neg = seti_analysis_respon$document$confidence$negative,
      doc_confi_posi = seti_analysis_respon$document$confidence$positive,
      doc_confi_neut = seti_analysis_respon$document$confidence$neutral
    )
    
    # create a data.table of sentence-level information
    sent_dt <- data.table(
      sent_content = sapply(seti_analysis_respon$sentences, function(x) x$content),
      sent_offset = sapply(seti_analysis_respon$sentences, function(x) x$offset),
      sent_length = sapply(seti_analysis_respon$sentences, function(x) x$length),
      sent_sentiment = sapply(seti_analysis_respon$sentences, function(x) x$sentiment),
      sent_confi_neg = sapply(seti_analysis_respon$sentences, function(x) x$confidence$negative),
      sent_confi_posi = sapply(seti_analysis_respon$sentences, function(x) x$confidence$positive),
      sent_confi_neut = sapply(seti_analysis_respon$sentences, function(x) x$confidence$neutral),
      sent_highlight_offset = sapply(seti_analysis_respon$sentences, function(x) x$highlights[[1]]$offset),
      sent_highlight_length = sapply(seti_analysis_respon$sentences, function(x) x$highlights[[1]]$length)
    )
    
    print("end")
    
    comb_dt <- cbind(id = x$id, doc_dt, sent_dt)
    
  }))

```

감성분석 결과는 다음과 같다. 여기서 doc와 senti로 시작하면 각각 문서와 그 문서를 구성하는 문장으로 나타낸다. 네이버 클로버 감성분석은 분석하는 문서(doc)의 문장을 자동으로 분류해준다.

```{r, echo = FALSE}
db_sent_2a <- fread("result/db_sent_2a.csv")
db_sent_2a %>% slice(1:3) %>% kable()
```

## 2.2. 구글 감성분석

구글 감성 분석은 [여기](https://brunch.co.kr/@mapthecity/25)에서 자세히 배울 수 있다. 네이버 감성분석과 같이 R를 활용하여 구글 감성 분석 API를 쓰는 방법은 추후에 업데이트하고자 한다.

# 3. 감성분석 비교

## 3.1. 분류 정확도 요약

네이버 감성분석은 F1 점수가 0.84로 구글 감성분석 0.642보다 더 높았다.

```{r, echo = FALSE}
conf_mat_naver <- read_rds('result/conf_mat_naver.rds')
conf_mat_google <- read_rds('result/conf_mat_google.rds')
ttt <- fread("result/result_senti_google_param.csv") %>% arrange(-`F1`) %>%
  select(id, F1, `Balanced Accuracy`) %>% slice(1)


data.table(
  지표 = c("F1-score", "Balanced Accuracy"),
  `네이버 감성분석` = c(number(conf_mat_naver$F1, accuracy = 0.001), number(conf_mat_naver$`Balanced Accuracy`, accuracy = 0.001)),
  `구글 감성분석` = c(number(conf_mat_google$F1, accuracy = 0.001), number(conf_mat_google$`Balanced Accuracy`, accuracy = 0.001)),
  `구글 감성분석(조정 후)` = c(number(ttt$F1, accuracy = 0.001), number(ttt$`Balanced Accuracy`, accuracy = 0.001))
  ) %>% kable()


```

## 3.2. 비교 데이터셋 만들기

분석할 감성분석 결과 DB를 만들어준다.

```{r}
db_sent_2b <- unique(db_sent_2a, by = "id") %>%
  select(id, doc_senti)

db_sent_f <- db_sent_1b %>%
  left_join(db_sent_2b, by = "id") %>%
  mutate(
    senti_label_google = case_when(
      between(senti_score_google, 0.25, 1) ~ "긍정",
      between(senti_score_google, -0.25, 0.25) ~ "중립",
      TRUE ~ "부정"),
    senti_label_naver = case_when(
      doc_senti == "positive" ~ "긍정",
      doc_senti == "neutral" ~ "중립",
      TRUE ~ "부정")
    ) %>%
  select(id, sent_content, senti_label_google, senti_label_naver, label) %>%
    mutate_at(c("senti_label_google", "senti_label_naver", "label"), factor, levels = c("부정", "중립", "긍정"))

```

```{r}
conf_mat_google <- confusion_matrix(
  targets = db_sent_f$label,
  predictions = db_sent_f$senti_label_google
  )

conf_mat_naver <- confusion_matrix(
  targets = db_sent_f$label,
  predictions = db_sent_f$senti_label_naver
  )


```

## 3.3. 감성분석 상세

### 네이버 감성분석




```{r}
plot_confusion_matrix(conf_mat_naver$`Confusion Matrix`[[1]], 
                      class_order = c("긍정", "중립", "부정"),
                      add_sums = TRUE)  +
  ggplot2::labs(title = "네이버 감성분석 분류 정확도 결과")
```


### 잘못 분류한 문장
#### 중립 문장을 긍정으로 잘못 분류한 경우
``` {r, echo = FALSE}
db_sent_2b <- unique(db_sent_2a, by = "id") %>%
  select(id, doc_senti, doc_confi_posi, doc_confi_neut, doc_confi_neg)

db_sent_ff <- db_sent_1b %>%
  left_join(db_sent_2b, by = "id") %>%
  mutate(
    senti_label_google = case_when(
      between(senti_score_google, 0.25, 1) ~ "긍정",
      between(senti_score_google, -0.25, 0.25) ~ "중립",
      TRUE ~ "부정"),
    senti_label_naver = case_when(
      doc_senti == "positive" ~ "긍정",
      doc_senti == "neutral" ~ "중립",
      TRUE ~ "부정")
    )

ttt <- data.table(db_sent_ff)[label == "긍정" & senti_label_naver == "중립"][
  , .(id, sent_content, label, senti_label_naver, doc_confi_posi, doc_confi_neut, doc_confi_neg)] 

datatable(
  ttt,
  options = list(
    pageLength = 5, # Set number of rows per page
    lengthMenu = c(10, 20, 50), # Set options for number of rows per page
    dom = 'tp' # Show table and pagination controls at top of table
  )
)

```


``` {r}
db_sent_2b <- unique(db_sent_2a, by = "id") %>%
  select(id, doc_senti, doc_confi_posi, doc_confi_neut, doc_confi_neg)

db_sent_f <- db_sent_1b %>%
  left_join(db_sent_2b, by = "id") %>%
  mutate(
    senti_label_google = case_when(
      between(senti_score_google, 0.25, 1) ~ "긍정",
      between(senti_score_google, -0.25, 0.25) ~ "중립",
      TRUE ~ "부정"),
    senti_label_naver = case_when(
      doc_senti == "positive" ~ "긍정",
      doc_senti == "neutral" ~ "중립",
      TRUE ~ "부정")
    )

data.table(db_sent_f)[label == "부정" & senti_label_naver == "중립"][
  , .(id, sent_content, label, senti_label_naver, doc_confi_posi, doc_confi_neut, doc_confi_neg)]
```






### 구글 감성분석

```{r}
plot_confusion_matrix(conf_mat_google$`Confusion Matrix`[[1]], 
                      class_order = c("긍정", "중립", "부정"),
                      add_sums = TRUE)

```

#### 구글 감성분석 parameter

문장별로 감성점수를 제공하는 구글 자연어처리 서비스에서 점수를 긍정과 부정, 중립으로 나누는 기준이 모호하다는 생각이 들었다. 아래 예시와 같이, '싸늘하다' 등은 부정적으로 느껴지지만 구글 감성점수 기준에서는 중립에 속한다.

![](image/ex_google_senti.png){width="80%"}

긍정과 긍정을 결정하는 기준을 다르게해서 구글 감성분석 라벨을 다시 매겨보았다.

``` {r, eval = FALSE}

list_parameter <- expand.grid(
  threshold_posi = seq(0.25, 0.95, 0.05),
  threshold_neg = seq(0.25, -0.95, -0.05)) %>%
  mutate(id = row_number()) %>%
  group_split(id)

result_senti_google_param <- rbindlist(future_map(
  list_parameter, function(x){
    
    
    db_sent_f <- db_sent_1b %>%
      left_join(db_sent_2b, by = "id") %>%
      mutate(
        senti_label_google = case_when(
          between(senti_score_google, x$threshold_posi, 1) ~ "긍정",
          between(senti_score_google, -1, x$threshold_neg) ~ "부정",
          TRUE ~ "중립")) %>%
      select(id, sent_content, senti_label_google, label) %>%
      mutate_at(c("senti_label_google", "label"), factor, levels = c("부정", "중립", "긍정"))
    
    conf_mat_google <- confusion_matrix(
      targets = db_sent_f$label,
      predictions = db_sent_f$senti_label_google)
    
    out <- cbind(x, F1 = conf_mat_google$F1, `Balanced Accuracy` = conf_mat_google$`Balanced Accuracy`)
  }
  
))



```

내가 매긴 라벨이 정답이라는 가정 하에, 기준 값을 조정하면 F1 점수는 0.7181로 기준 0.5534에서 높아진다.

``` {r, echo = FALSE} 
fread("result/result_senti_google_param.csv") %>% arrange(-`F1`) %>% slice(1:5) %>% 
  mutate(F1 =  number(F1, accuracy = 0.0001)) %>%
  select(id, F1, threshold_posi, threshold_neg) %>% kable()

```

### 잘못분류한 문장들

``` {r, echo = FALSE}
db_sent_2b <- unique(db_sent_2a, by = "id") %>%
  select(id, doc_senti, doc_confi_posi, doc_confi_neut, doc_confi_neg)

db_sent_ff <- db_sent_1b %>%
  left_join(db_sent_2b, by = "id") %>%
  mutate(
    senti_label_google = case_when(
      between(senti_score_google, 0.55	, 1) ~ "긍정",
      between(senti_score_google, -1, -0.15) ~ "부정",
      TRUE ~ "중립"),
    senti_label_naver = case_when(
      doc_senti == "positive" ~ "긍정",
      doc_senti == "neutral" ~ "중립",
      TRUE ~ "부정")
    )

ttt <- data.table(db_sent_f)[label == "부정" & senti_label_google == "중립"][
  , .(id, sent_content, label, senti_label_google, senti_score_google)] 

datatable(
  ttt,
  options = list(
    pageLength = 5, # Set number of rows per page
    lengthMenu = c(10, 20, 50), # Set options for number of rows per page
    dom = 'tp' # Show table and pagination controls at top of table
  )
)

```

