[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Juhyeon Park",
    "section": "",
    "text": "I am an urban planner and data scientist. I am currently a postdoctoral researcher at the Urban Planning & Analytics Lab at UNIST. My interests include urban analytics, Data mining/visualization, and smart cities.\nWith this blog, I intend to make a good quality of the blogs that have inspired me during my urban research. I hope it helps to provide valuable insights and resources for fellow enthusiasts of the field."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Juhyeon Park",
    "section": "",
    "text": "I am an urban planner and data scientist working to improve the use of urban data as the evidence base for formulating urban policies, plans, strategies, and programs.\nMy particular areas of interest are:\n\nUrban analytics\nData mining/visualization\nSmart cities\n\nI use this site to showcase my recent work, and discuss new data-science and statistical tools and techniques on my blog.\n\n\nUlsan National Institute of Science and Technology PhD in Urban and Environmental Engineering | 2022\nUlsan National Institute of Science and Technology B.S. in Urban and Environmental Engineering | 2015\n\n\n\nPostdoctoral Researcher at Ulsan National Institute of Science and Technology | February 2022 - present\n\n\n\nDownload my resumé."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "주거상담기록 텍스트 전처리\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nR를 활용하여 Open API로 공개된 데이터 수집하기\n\n\n\n\n\n\n\nR\n\n\nOpen API\n\n\n\n\nOpen API로 공개된 공공데이터를 R로 수집해보자\n\n\n\n\n\n\nFeb 11, 2023\n\n\n\n\n\n\n  \n\n\n\n\n주거상담기록 분석 (2): 텍스트 전처리\n\n\n\n\n\n\n\npython\n\n\nMorphology analysis\n\n\n\n\n주거상담 주제 분석\n\n\n\n\n\n\nFeb 11, 2023\n\n\n\n\n\n\n  \n\n\n\n\nR를 활용하여 구글 지도 데이터 수집하기\n\n\n\n\n\n\n\nR\n\n\nGoogle Maps\n\n\n\n\n구글 지도에 등록된 POI 정보를 R을 활용하여 모아보자\n\n\n\n\n\n\nJan 15, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/housing-consultation-analysis-2/index.html",
    "href": "posts/housing-consultation-analysis-2/index.html",
    "title": "주거상담기록 분석 (2): 텍스트 전처리",
    "section": "",
    "text": "텍스트 전처리는 주거상담 원형 텍스트를 정제하고 토큰화하는 작업을 말한다. 비정형 텍스트 데이터는 그대로 활용할 수 없어 취득 이후, 전처리하는 과정을 거쳐야 한다.\n\n\n1. 텍스트 정제\n\n1.1. 패키지 설치 및 데이터 불러오기\n이번 작업에서 필요한 패키지를 설치하는 코드는 아래와 같다.\n\n## 필요한 패키지 설치하기\n!pip install pandas\n!pip install tqdm\n!pip install kiwipiepy\n\n설치 후, 필요한 패키지를 먼저 불러온다.\n\n## 필요한 모듈 불러오기\nimport json, random, re, os\nimport swifter\nimport pandas as pd\nfrom tqdm import tqdm # 작업 프로세스 시각화\nfrom kiwipiepy import Kiwi # 형태소분석기 모듈\nfrom kiwipiepy.utils import Stopwords # 불용어사전 담겨있는 모듈 불러오기\n\ncsv로 저장된 데이터를 불러온다. 예제 파일은 여기에서 다운로드 할 수 있다. id_f는 각 데이터 고유 ID, cons_text는 형태소 분석 할 상담 내용이다.\n\ndb_record = pd.read_csv(\"data/db_record_v1_sample.csv\") # 데이터 불러오기\n\n\n\n\n\n\n  \n    \n      id_f\n      cons_text\n    \n  \n  \n    \n      1\n      * 재개발 임대 아파트 거주중.\n* 임대료 7개월 1,381,980원 체납\n* 일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함.\n* 작년 20.10.30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데, 수급자 신청해 보려 했으나, 실업급여와 중복으로 받을 수 없다고 안내를 받았다 함. \n* 임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니, 이번에 빌려서 어떻게든 해결해 보려 한다고 하심.  \n* 일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데, 필요하신지 여쭤보았더니, 자신이 직접 알아보시겠다고 하심.\n    \n    \n      2\n      * 청년임차보증금 이자지원사업 추천서 관련 문의전화 주심(20대 추정)\n* 건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음. 국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨. 취업준비생 유형으로 신청 가능한지 궁금\n· 취업준비생 유형으로 신청 가능\n* 서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금\n· 서울주거포털 추천서 신청시 현주소 기입\n* 서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금\n· 서울시추천서 유효기간 발급일로부터 3개월임을 안내\n    \n  \n\n\n\n\n\n1.2. 불필요한 토큰 제거\n원형 텍스트에서 불필요한 토큰인 기호, 태그, 등을 삭제한다. 때로는 숫자와 영어도 불필요하다고 여겨지지만 ‘1인가구’, ‘2룸’, ‘LH’, ‘SH’ 등 의미있는 토큰이 많아 삭제하지 않았다. 아래 코드로 먼저 텍스트 내 영어 표현을 모두 소문자화 한 후, 한글과 숫자, 영어 외 나머지를 공백 처리했다.\n\ndb_record['cons_text_cleaned_1'] = list(map(lambda text: re.sub(r\"([^가-힣0-9a-z ])\", \" \", text), db_record['cons_text'].str.lower()))\n\n\n\n\n\n\n  \n    \n      cons_text\n      cons_text_cleaned_1\n    \n  \n  \n    \n      * 재개발 임대 아파트 거주중.\n* 임대료 7개월 1,381,980원 체납\n* 일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함.\n* 작년 20.10.30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데, 수급자 신청해 보려 했으나, 실업급여와 중복으로 받을 수 없다고 안내를 받았다 함. \n* 임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니, 이번에 빌려서 어떻게든 해결해 보려 한다고 하심.  \n* 일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데, 필요하신지 여쭤보았더니, 자신이 직접 알아보시겠다고 하심.\n        재개발 임대 아파트 거주중    임대료 7개월 1 381 980원 체납   일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함    작년 20 10 30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데  수급자 신청해 보려 했으나  실업급여와 중복으로 받을 수 없다고 안내를 받았다 함     임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니  이번에 빌려서 어떻게든 해결해 보려 한다고 하심      일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데  필요하신지 여쭤보았더니  자신이 직접 알아보시겠다고 하심 \n    \n    \n      * 청년임차보증금 이자지원사업 추천서 관련 문의전화 주심(20대 추정)\n* 건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음. 국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨. 취업준비생 유형으로 신청 가능한지 궁금\n· 취업준비생 유형으로 신청 가능\n* 서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금\n· 서울주거포털 추천서 신청시 현주소 기입\n* 서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금\n· 서울시추천서 유효기간 발급일로부터 3개월임을 안내\n        청년임차보증금 이자지원사업 추천서 관련 문의전화 주심 20대 추정    건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음  국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨  취업준비생 유형으로 신청 가능한지 궁금   취업준비생 유형으로 신청 가능   서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금   서울주거포털 추천서 신청시 현주소 기입   서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금   서울시추천서 유효기간 발급일로부터 3개월임을 안내\n    \n  \n\n\n\n\n\n1.3. 동의어 사전\n같은 의미지만 다른 표현으로 쓰는 단어를 통일한다. 아래와 같이 구축한 동의어 사전을 활용하며, 사전은 바꿔줄 단어beforeWord, 바꿀 단어afterWord로 구성했다.\n\n\n\n\n\n  \n    \n       \n      beforeWord\n      afterWord\n    \n  \n  \n    \n      0\n      재개발 임대\n      재개발임대\n    \n    \n      1\n      재개발임대주택\n      재개발임대\n    \n    \n      2\n      서울 주거포털\n      서울주거포털\n    \n    \n      3\n      현대아산재단 \n      아산사회복지재단\n    \n    \n      4\n      아산재단\n      아산사회복지재단\n    \n    \n      5\n      아산사회복지 재단\n      아산사회복지재단\n    \n    \n      6\n      아산복지재단\n      아산사회복지재단\n    \n  \n\n\n\n‘재개발 임대’는 ’재개발’과 ’임대’가 아닌 ’재개발임대’의 다른 표현이므로 이를 통일시켰다. ’서울 주거포털’도 마찬가지 사례다. ’아산사회복지재단’은 ’현대아산재단’, ‘아산재단’ 등 다르게 쓰는 표현을 일치시켜주었다.\n동의어 사전으로 상담 원문 내용을 바꾸는 코드는 아래와 같다. 함수 replace_word는 한 개의 상담 내용cons_text 열마다 동의어사전dict_synonyms에서 beforeWord와 일치하는 구간이 발견되면 afterWord로 바꾼다.\n\n\n1.4. 적용\n위 작업을 하는 코드는 아래와 같다.\n\n## 구축한 동의어사전 불러오기\ndict_synonyms = pd.read_csv('data/dict/dict_synonyms.csv')\n\n## 동의어사전을 적용하는 함수 정의\ndef replace_word(text):\n    for i in range(len(dict_synonyms['beforeWord'])): \n        try:\n            if dict_synonyms['beforeWord'][i] in text: # beforeWord가 상담내용에서 발견된다면\n                text = text.replace(dict_synonyms['beforeWord'][i], dict_synonyms['afterWord'][i]) # 해당하는 단어의 afterWord로 바꾸어라\n        except Exception as e: # 에러가 있다면 멈추고 알려주어라\n            print(f\"Error 발생 / 에러명: {e}\")\n            print(dict_synonyms['afterWord'][i])\n            print(text)\n    return text\n\ndb_record['cons_text_cleaned_2'] = db_record['cons_text_cleaned_1'].swifter.set_npartitions(npartitions = 12).apply(lambda x: replace_word(x))\n\n\n\n\n\n\n\n\n\n  \n    \n      cons_text\n      cons_text_cleaned_2\n    \n  \n  \n    \n      * 재개발 임대 아파트 거주중.\n* 임대료 7개월 1,381,980원 체납\n* 일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함.\n* 작년 20.10.30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데, 수급자 신청해 보려 했으나, 실업급여와 중복으로 받을 수 없다고 안내를 받았다 함. \n* 임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니, 이번에 빌려서 어떻게든 해결해 보려 한다고 하심.  \n* 일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데, 필요하신지 여쭤보았더니, 자신이 직접 알아보시겠다고 하심.\n        재개발임대 아파트 거주중    임대료 7개월 1 381 980원 체납   일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함    작년 20 10 30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데  수급자 신청해 보려 했으나  실업급여와 중복으로 받을 수 없다고 안내를 받았다 함     임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니  이번에 빌려서 어떻게든 해결해 보려 한다고 하심      일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데  필요하신지 여쭤보았더니  자신이 직접 알아보시겠다고 하심 \n    \n    \n      * 청년임차보증금 이자지원사업 추천서 관련 문의전화 주심(20대 추정)\n* 건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음. 국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨. 취업준비생 유형으로 신청 가능한지 궁금\n· 취업준비생 유형으로 신청 가능\n* 서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금\n· 서울주거포털 추천서 신청시 현주소 기입\n* 서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금\n· 서울시추천서 유효기간 발급일로부터 3개월임을 안내\n        청년임차보증금 이자지원 추천서 관련 문의전화 주심 20대 추정    건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음  국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨  취업준비생 유형으로 신청 가능한지 궁금   취업준비생 유형으로 신청 가능   서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금   서울주거포털 추천서 신청시 현주소 기입   서울시추천서 신청과 이사 할 전월세주택물색 중에서 어느것을 먼저 해야하는지 궁금   서울시추천서 유효기간 발급일로부터 3개월임을 안내\n    \n  \n\n\n\n\n\n\n2. 텍스트 토큰화\n\n2.1. 형태소분석기 Kiwi\n다양한 형태소분석기 중 Kiwi를 선택했다. 빠른 속도와 준수한 정확도, 그리고 사용자사전 수정과 활용이 쉽기 때문이다. 앞의 두 장점과 분석기 설명은 여기에서 확인 가능하다.\n기본 설정으로 Kiwi 분석기로 형태소 분석을 한 결과는 다음과 같다.\n\nkiwi = Kiwi() # Kiwi 기본값 설정\nkiwi.tokenize(\"서울주거포털에서 재개발임대 정보를 알아보셰요\")\n\n[Token(form='서울', tag='NNP', start=0, len=2),\n Token(form='주거', tag='NNG', start=2, len=2),\n Token(form='포털', tag='NNG', start=4, len=2),\n Token(form='에서', tag='JKB', start=6, len=2),\n Token(form='재', tag='XPN', start=9, len=1),\n Token(form='개발', tag='NNG', start=10, len=2),\n Token(form='임대', tag='NNG', start=12, len=2),\n Token(form='정보', tag='NNG', start=15, len=2),\n Token(form='를', tag='JKO', start=17, len=1),\n Token(form='알아보셰요', tag='NNG', start=19, len=5)]\n\n\n형태소화된 토큰은 원형form과 형태소tag, 시작위치start, 길이len으로 구성된다.\n\n\n[Token(form='서울', tag='NNP', start=0, len=2), \n Token(form='주거', tag='NNG', start=2, len=2), \n Token(form='포털', tag='NNG', start=4, len=2), \n Token(form='에서', tag='JKB', start=6, len=2), \n Token(form='재', tag='XPN', start=9, len=1), \n Token(form='개발', tag='NNG', start=10, len=2), \n Token(form='임대', tag='NNG', start=12, len=2), \n Token(form='장보', tag='NNP', start=15, len=2), \n Token(form='를', tag='JKO', start=17, len=1), \n Token(form='알', tag='VV', start=19, len=1), \n Token(form='어', tag='EC', start=20, len=1), \n Token(form='보', tag='VX', start=21, len=1), \n Token(form='세', tag='EC', start=22, len=1), \n Token(form='요', tag='JX', start=23, len=1)]\n\n\n\n\n2.2. Kiwi 추가 설정\n이 모듈에서 몇가지 추가 설정을 한 코드는 다음과 같다.\n\n1은 형태소 분석기에 활용하는 모델을 지정하고 2는 기본적인 맞춤법 검사를 하게끔 한다(자세한 정보는 여기).\n4는 불용어를 걸러내준다. Stopword()은 Kiwi에서 제공하는 기본 불용어사전이다.\n3은 사용자정의사전을 추가하는 것이다. 위 결과에서 보이듯 사용자정의사전을 추가하지 않으면 ’서울주거포털’은 ’서울 + 주거 + 포털’로 나눠지게 된다. 사용자정의사전을 만드는 코드는 아래와 같다.\n\n## 동의어사전에서 추출하기\ndict_synonyms = pd.read_csv('data/dict/dict_synonyms.csv') # 동의어사전 불러오기\nlist_userDefined_synonyms = (dict_synonyms['afterWord'].str.strip().unique() + \"\\tNNG\\t9\").tolist() # 사용자 정의 사전 포맷으로 변경\n\n## 사용자 정의 사전 불러오기\ndict_add = pd.read_table(\"data/dict/dict_userDefined_madeByMe.txt\") # 추가 사전 불러오기\nlist_userDefined_add = (pd.read_table(\"data/dict/dict_userDefined_madeByMe.txt\", header = None, sep = \"-\")[0] + \"\\t9\").tolist() # 사용자 정의 사전 포맷으로 변경\n\n## 위 두 사전 합치기\ndict_userDefined = pd.DataFrame(pd.DataFrame(list_userDefined_synonyms + list_userDefined_add)[0].unique()) # 두 list 결합\ndict_userDefined.to_csv('data/dict/dict_userDefined.txt', index = False, header = False) # 새로운 사용자 정의 사전 저장하기\n\n동의어 사전 부분은 afterWord를 고유명사화(NNG) 하는 작업이다. 동의어 사전에서 지정한 단어들은 ‘1인가구’, ‘미성년자’, ‘늘푸른돌봄센터’ 등으로 대부분 명사에 속하기 때문이다.\n따로 만든 사용자 정의 사전에는 명사 외 사용자 정의를 해줄 단어가 들어있다. ‘통보함’이 ’통보함(NNG/명사)’가 아니라 ’통보/NNG + 하/VV + 다/EF’, ’연락키로’가 ’연락키로(NNG/명사)’가 아니라 ’연락/NNG + 하/XSV + 기/ETN + 로/JKB’로 형태소화 되게끔 만들었다.\n추가 설정을 한 형태소 분석의 결과는 다음과 같다.\n\n## Kiwi 설정\nkiwi = Kiwi(model_type = 'sbg', typos = 'basic') # Kiwi 추가 설정\nkiwi.load_user_dictionary('data/dict/dict_userDefined.txt') # 사용자사전 추가\nkiwi.tokenize(\"서울주거포털에서 재개발임대 정보를 알아보셰요\", stopwords = Stopwords())\n\n\n\n[Token(form='서울주거포털', tag='NNG', start=0, len=6), \n Token(form='재개발임대', tag='NNG', start=9, len=5), \n Token(form='정보', tag='NNG', start=15, len=2), \n Token(form='알', tag='VV', start=19, len=1), \n Token(form='보', tag='VX', start=21, len=1), \n Token(form='세', tag='EC', start=22, len=1), \n Token(form='요', tag='JX', start=23, len=1)]\n\n\n\n\n2.3. 적용\n위 작업을 적용한 결과는 다음과 같다.\n\n## Kiwi 설정\nkiwi = Kiwi(model_type = 'sbg', typos = 'basic') # Kiwi 추가 설정\nkiwi.load_user_dictionary('data/dict/dict_userDefined.txt') # 사용자사전 추가\nmorph_analysis = lambda x: kiwi.tokenize(x, stopwords = Stopwords()) if type(x) is str else None # 형태소 분석\ndb_record['cons_text_posTagged_kiwi'] = db_record['cons_text_cleaned_2'].swifter.apply(morph_analysis)\n\n\n\n\n\n\n\n\n\n  \n    \n      cons_text\n      cons_text_posTagged_kiwi\n    \n  \n  \n    \n      * 재개발 임대 아파트 거주중.\n* 임대료 7개월 1,381,980원 체납\n* 일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함.\n* 작년 20.10.30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데, 수급자 신청해 보려 했으나, 실업급여와 중복으로 받을 수 없다고 안내를 받았다 함. \n* 임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니, 이번에 빌려서 어떻게든 해결해 보려 한다고 하심.  \n* 일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데, 필요하신지 여쭤보았더니, 자신이 직접 알아보시겠다고 하심.\n      [Token(form='재개발임대', tag='NNG', start=2, len=5), Token(form='아파트', tag='NNG', start=8, len=3), Token(form='거주', tag='NNG', start=12, len=3), Token(form='임대료', tag='NNG', start=19, len=3), Token(form='7', tag='SN', start=23, len=1), Token(form='개월', tag='NNB', start=24, len=2), Token(form='1', tag='SN', start=27, len=1), Token(form='381', tag='SN', start=29, len=3), Token(form='980', tag='SN', start=33, len=3), Token(form='체납', tag='NNG', start=38, len=2), Token(form='일자리', tag='NNG', start=43, len=3), Token(form='구하', tag='VV', start=48, len=2), Token(form='중', tag='NNG', start=52, len=1), Token(form='수입', tag='NNG', start=56, len=2), Token(form='경제', tag='NNG', start=63, len=2), Token(form='어렵', tag='VA-I', start=69, len=3), Token(form='상황', tag='NNG', start=73, len=2), Token(form='인하', tag='VV', start=78, len=2), Token(form='ᆷ', tag='ETM', start=79, len=1), Token(form='작년', tag='NNG', start=84, len=2), Token(form='20', tag='SN', start=87, len=2), Token(form='10', tag='SN', start=90, len=2), Token(form='30', tag='SN', start=93, len=2), Token(form='체납', tag='NNG', start=96, len=2), Token(form='상담', tag='NNG', start=99, len=2), Token(form='대상자', tag='NNG', start=104, len=3), Token(form='현재', tag='MAG', start=109, len=2), Token(form='실업급여', tag='NNG', start=112, len=4), Token(form='180', tag='SN', start=118, len=3), Token(form='나오', tag='VV', start=125, len=2), Token(form='데', tag='NNB', start=131, len=1), Token(form='수급자', tag='NNG', start=134, len=3), Token(form='신청', tag='NNG', start=138, len=2), Token(form='보', tag='VX', start=142, len=1), Token(form='려', tag='EC', start=143, len=1), Token(form='으나', tag='EC', start=146, len=2), Token(form='실업급여', tag='NNG', start=150, len=4), Token(form='중복', tag='NNG', start=156, len=2), Token(form='받', tag='VV-R', start=161, len=1), Token(form='안내', tag='NNG', start=170, len=2), Token(form='받', tag='VV-R', start=174, len=1), Token(form='함', tag='NNP', start=178, len=1), Token(form='임대료', tag='NNG', start=184, len=3), Token(form='체납', tag='NNG', start=188, len=2), Token(form='기간', tag='NNG', start=191, len=2), Token(form='길어지', tag='VV', start=195, len=3), Token(form='ᆯ수록', tag='EC', start=197, len=3), Token(form='나중', tag='NNG', start=201, len=2), Token(form='퇴거', tag='NNG', start=205, len=2), Token(form='명령', tag='NNG', start=208, len=2), Token(form='받', tag='VV-R', start=212, len=1), Token(form='으시', tag='EP', start=213, len=2), Token(form='있', tag='VA', start=219, len=1), Token(form='안내', tag='NNG', start=223, len=2), Token(form='드리', tag='VV', start=225, len=2), Token(form='더니', tag='EC', start=227, len=2), Token(form='이번', tag='NNG', start=231, len=2), Token(form='빌리', tag='VV', start=235, len=2), Token(form='어떻게', tag='MAG', start=239, len=3), Token(form='든', tag='JX', start=242, len=1), Token(form='해결', tag='NNG', start=244, len=2), Token(form='보', tag='VX', start=248, len=1), Token(form='려', tag='EC', start=249, len=1), Token(form='ᆫ다고', tag='EC', start=251, len=3), Token(form='시', tag='EP', start=255, len=2), Token(form='일자리', tag='NNG', start=263, len=3), Token(form='구하', tag='VV', start=268, len=2), Token(form='시', tag='EP', start=270, len=1), Token(form='ᆫ다고', tag='EC', start=270, len=3), Token(form='시', tag='EP', start=275, len=1), Token(form='임대주택', tag='NNG', start=278, len=4), Token(form='입주자', tag='NNG', start=283, len=3), Token(form='분', tag='NNB', start=287, len=1), Token(form='께', tag='JKB', start=289, len=1), Token(form='일자리', tag='NNG', start=291, len=3), Token(form='상담', tag='NNG', start=295, len=2), Token(form='연계', tag='NNG', start=298, len=2), Token(form='드리', tag='VX', start=302, len=2), Token(form='데', tag='NNB', start=308, len=1), Token(form='필요', tag='NNG', start=311, len=2), Token(form='시', tag='EP', start=314, len=1), Token(form='ᆫ지', tag='EC', start=314, len=2), Token(form='여쭈', tag='VV', start=317, len=2), Token(form='보', tag='VX', start=319, len=1), Token(form='더니', tag='EC', start=321, len=2), Token(form='자신', tag='NNG', start=325, len=2), Token(form='직접', tag='MAG', start=329, len=2), Token(form='알아보', tag='VV', start=332, len=3), Token(form='시', tag='EP', start=335, len=1), Token(form='시', tag='EP', start=340, len=2)]\n    \n    \n      * 청년임차보증금 이자지원사업 추천서 관련 문의전화 주심(20대 추정)\n* 건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음. 국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨. 취업준비생 유형으로 신청 가능한지 궁금\n· 취업준비생 유형으로 신청 가능\n* 서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금\n· 서울주거포털 추천서 신청시 현주소 기입\n* 서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금\n· 서울시추천서 유효기간 발급일로부터 3개월임을 안내\n      [Token(form='청년', tag='NNG', start=2, len=2), Token(form='임차보증금', tag='NNG', start=4, len=5), Token(form='이자지원', tag='NNG', start=10, len=4), Token(form='추천서', tag='NNG', start=15, len=3), Token(form='관련', tag='NNG', start=19, len=2), Token(form='문의', tag='NNG', start=22, len=2), Token(form='전화', tag='NNG', start=24, len=2), Token(form='주', tag='VV', start=27, len=2), Token(form='시', tag='EP', start=27, len=2), Token(form='20', tag='SN', start=30, len=2), Token(form='대', tag='NNB', start=32, len=1), Token(form='추정', tag='NNG', start=34, len=2), Token(form='건강', tag='NNG', start=40, len=2), Token(form='보험', tag='NNG', start=42, len=2), Token(form='자격', tag='NNG', start=44, len=2), Token(form='득실', tag='NNG', start=46, len=2), Token(form='확인서', tag='NNG', start=48, len=3), Token(form='가입자', tag='NNG', start=54, len=3), Token(form='대학생', tag='NNG', start=60, len=3), Token(form='소득', tag='NNG', start=66, len=2), Token(form='음', tag='EC', start=70, len=1), Token(form='국세청', tag='NNG', start=73, len=3), Token(form='홈텍스', tag='NNG', start=76, len=3), Token(form='소득', tag='NNG', start=80, len=2), Token(form='금액', tag='NNG', start=82, len=2), Token(form='증명', tag='NNG', start=84, len=2), Token(form='원', tag='NNG', start=86, len=1), Token(form='조회', tag='NNG', start=88, len=2), Token(form='결과', tag='NNG', start=90, len=2), Token(form='2019', tag='SN', start=93, len=4), Token(form='아르바이트', tag='NNG', start=99, len=5), Token(form='소득', tag='NNG', start=105, len=2), Token(form='조회됨', tag='NNG', start=108, len=3), Token(form='취업', tag='NNG', start=113, len=2), Token(form='준비', tag='NNG', start=115, len=2), Token(form='생', tag='XSN', start=117, len=1), Token(form='유형', tag='NNG', start=119, len=2), Token(form='신청', tag='NNG', start=124, len=2), Token(form='가능', tag='NNG', start=127, len=2), Token(form='ᆫ지', tag='EC', start=129, len=2), Token(form='궁금', tag='NNG', start=132, len=2), Token(form='취업', tag='NNG', start=137, len=2), Token(form='준비', tag='NNG', start=139, len=2), Token(form='생', tag='XSN', start=141, len=1), Token(form='유형', tag='NNG', start=143, len=2), Token(form='신청', tag='NNG', start=148, len=2), Token(form='가능', tag='NNG', start=151, len=2), Token(form='서울주거포털', tag='NNG', start=156, len=6), Token(form='추천서', tag='NNG', start=165, len=3), Token(form='신청', tag='NNG', start=169, len=2), Token(form='시', tag='NNB', start=171, len=1), Token(form='거주지', tag='NNG', start=173, len=3), Token(form='주소', tag='NNG', start=177, len=2), Token(form='현', tag='MM', start=181, len=1), Token(form='주소', tag='NNG', start=182, len=2), Token(form='기입', tag='NNG', start=185, len=2), Token(form='ᆫ지', tag='EC', start=191, len=2), Token(form='궁금', tag='XR', start=194, len=2), Token(form='서울주거포털', tag='NNG', start=199, len=6), Token(form='추천서', tag='NNG', start=206, len=3), Token(form='신청', tag='NNG', start=210, len=2), Token(form='시', tag='NNB', start=212, len=1), Token(form='현주소', tag='NNG', start=214, len=3), Token(form='기입', tag='NNG', start=218, len=2), Token(form='서울시', tag='NNP', start=223, len=3), Token(form='추천서', tag='NNG', start=226, len=3), Token(form='신청', tag='NNG', start=230, len=2), Token(form='이사', tag='NNG', start=234, len=2), Token(form='전월세', tag='NNG', start=239, len=3), Token(form='주택물색', tag='NNG', start=242, len=4), Token(form='어느', tag='MM', start=251, len=2), Token(form='먼저', tag='MAG', start=256, len=2), Token(form='지', tag='NNB', start=263, len=1), Token(form='궁금', tag='NNG', start=265, len=2), Token(form='서울시', tag='NNP', start=270, len=3), Token(form='추천서', tag='NNG', start=273, len=3), Token(form='유효', tag='NNG', start=277, len=2), Token(form='기간', tag='NNG', start=279, len=2), Token(form='발급', tag='NNG', start=282, len=2), Token(form='로부터', tag='JKB', start=285, len=3), Token(form='3', tag='SN', start=289, len=1), Token(form='개월', tag='NNB', start=290, len=2), Token(form='ᆷ', tag='ETN', start=292, len=1), Token(form='안내', tag='NNG', start=295, len=2)]\n    \n  \n\n\n\n\n\n\n3. 불용어 제거 및 형태소 결합\n\n3.1. 불용어 사전\nkiwi 기본 불용어 사전에서 거르지 못한 불용어를 거르기 위해 사전을 만든다. ‘대상자’와 ’서비스’, ‘주거’ 등은 자주 등장하지만 크게 의미있는 단어가 아니다. 지역명과 상담사명도 마찬가지다.\n\n\n\n\n\n  \n    \n       \n      type\n      word\n      pos\n    \n  \n  \n    \n      0\n      일반\n      대상자\n      NNG\n    \n    \n      1\n      일반\n      서비스\n      NNG\n    \n    \n      2\n      일반\n      주거\n      NNG\n    \n    \n      3\n      일반\n      주택\n      NNG\n    \n    \n      4\n      일반\n      가구\n      NNG\n    \n    \n      5\n      지역명\n      잠실2동\n      NNG\n    \n    \n      6\n      지역명\n      잠실3동\n      NNG\n    \n    \n      7\n      상담사명\n      박상준\n      NNG\n    \n    \n      8\n      상담사명\n      이종현\n      NNG\n    \n  \n\n\n\n\n\n3.2. 한글자 사전\n단어가 한글자지만 중요한 것을 모아둔 사전이다. 보통 한글자는 의미가 잘 없다. 하지만 ‘돈’은 경제적 상황을 서술할 때 사용하며, ’좁’은 ’좁다’, ‘좁은 집’으로, ’낡’은 ’낡다’ 등으로 활용된다. 이 같은 의미있는 한글자는 불용어로 걸러지지 않게끔 한다. 형태소 분석한 토큰이 아주 짧은 경우는 보통 제거한다.\n\n\n\n\n\n  \n    \n       \n      word\n    \n  \n  \n    \n      0\n      돈\n    \n    \n      1\n      좁\n    \n    \n      2\n      낡\n    \n    \n      3\n      커\n    \n    \n      4\n      크\n    \n    \n      5\n      작\n    \n  \n\n\n\n\n\n3.3. 적용\n위 두 사전과 함께 형태소화된 토큰을 결합하는 단계는 아래와 같다.\n\n## 형태소분석된 것들을 join\ndict_stopword = pd.read_csv('data/dict/dict_stopword.csv')\ndict_oneChar = pd.read_csv(\"data/dict/dict_oneChar.csv\")\n\n## 품사 정의하기\nlist_pos_all = (\"N\", \"V\", \"M\", \"J\", \"E\", \"X\") # 주요 품사 모두\nlist_pos_main = (\"N\", \"V\") # 명사, 동사, 형용사만\n\n## 불용어 제거하고 형태소 결합하기\ndef tokenToText(tokens):\n    textJoinedMain = []\n    textJoinedAll = [] \n    for token, pos, _, _ in tokens:        \n        if (token not in list(dict_stopword['word']) and ( len(token) > 1 or (len(token) == 1 and token in list(dict_oneChar['word']) ) )): \n            if pos.startswith('V'): token = token + '다' # 동사라면 뒤에 '다'를 붙여서 자연스럽게 만들기\n            if pos.startswith(list_pos_main) : textJoinedMain.append(token)\n            if pos.startswith(list_pos_all) : textJoinedAll.append(token)\n\n    out = pd.Series([' '.join(textJoinedAll), ' '.join(textJoinedMain)])\n    return out\n\ndb_record[['cons_text_posTagged_all', 'cons_text_posTagged_main']] = db_record['cons_text_posTagged_kiwi'].swifter.set_npartitions(npartitions = 6).apply(lambda x: tokenToText(x))\n\n\n\n\n\n\n\n\n\n  \n    \n      cons_text\n      cons_text_posTagged_main\n    \n  \n  \n    \n      * 재개발 임대 아파트 거주중.\n* 임대료 7개월 1,381,980원 체납\n* 일자리를 구하는 중으로 수입이 없어 경제적으로 어려운 상황으로 인함.\n* 작년 20.10.30 체납 상담했던 대상자로 현재 실업급여로 180만원이 나오고 있는데, 수급자 신청해 보려 했으나, 실업급여와 중복으로 받을 수 없다고 안내를 받았다 함. \n* 임대료 체납 기간이 길어질수록 나중에 퇴거 명령을 받으실 수도 있다고 안내드렸더니, 이번에 빌려서 어떻게든 해결해 보려 한다고 하심.  \n* 일자리를 구하신다고 하셔서 임대주택 입주자 분들께 일자리 상담 연계해 드리고 있는데, 필요하신지 여쭤보았더니, 자신이 직접 알아보시겠다고 하심.\n      재개발임대 아파트 거주 임대료 체납 일자리 구하다 수입 경제 어렵다 상황 인하다 작년 체납 상담 실업급여 나오다 수급자 신청 실업급여 중복 안내 임대료 체납 기간 길어지다 나중 퇴거 명령 안내 드리다 빌리다 해결 일자리 구하다 임대주택 입주자 일자리 상담 연계 드리다 필요 여쭈다 알아보다\n    \n    \n      * 청년임차보증금 이자지원사업 추천서 관련 문의전화 주심(20대 추정)\n* 건강보험자격득실확인서 지역가입자이며 대학생으로 소득 없음. 국세청홈택스 소득금액증명원 조회결과 2019년 아르바이트 소득 조회됨. 취업준비생 유형으로 신청 가능한지 궁금\n· 취업준비생 유형으로 신청 가능\n* 서울주거포털에서 추천서 신청시 거주지 주소에 현주소 기입하는 것인지 궁금\n· 서울주거포털 추천서 신청시 현주소 기입\n* 서울시추천서 신청과 이사 할 전월세주택 물색 중에서 어느것을 먼저 해야하는지 궁금\n· 서울시추천서 유효기간 발급일로부터 3개월임을 안내\n      청년 임차보증금 이자지원 추천서 문의 전화 추정 건강 보험 자격 득실 확인서 가입자 대학생 소득 국세청 홈텍스 소득 금액 증명 조회 결과 아르바이트 소득 조회됨 취업 준비 유형 신청 가능 궁금 취업 준비 유형 신청 가능 서울주거포털 추천서 신청 거주지 주소 주소 기입 서울주거포털 추천서 신청 현주소 기입 서울시 추천서 신청 이사 전월세 주택물색 궁금 서울시 추천서 유효 기간 발급 안내\n    \n  \n\n\n\n\n\n\n끝으로\n위 과정을 종합한 코드는 여기에서 다운로드 가능하다."
  },
  {
    "objectID": "posts/housing-consultation-analysis-2/data/2. morphAnalysis.html",
    "href": "posts/housing-consultation-analysis-2/data/2. morphAnalysis.html",
    "title": "Juhyeon Park",
    "section": "",
    "text": "#!pip install pandas\n#!pip install tqdm\n#!pip install kiwipiepy\n\n\n## 필요한 모듈 불러오기\nimport json, random, re, os\nimport swifter\nimport pandas as pd\nfrom tqdm import tqdm # 작업 프로세스 시각화\nfrom kiwipiepy import Kiwi # 형태소분석기 모듈\nfrom kiwipiepy.utils import Stopwords # 불용어사전 담겨있는 모듈 불러오기\n\n\nprint(os.getcwd()) # 현재 디렉토리 경로 확인하기\ndb_record = pd.read_csv('D:/housingRecordAnalytics/Data/db_record_v1_230106.csv')[[\"id_f\", \"cons_text\"]] # 심층상담 데이터 읽기\n\n\\\\jsk\\server 1\\Project\\Ongoing\\housingConsultRecord\\2-Work\\jhyeonpark\\Code\n\n\nC:\\Users\\UNIST\\AppData\\Local\\Temp/ipykernel_32124/1285594222.py:2: DtypeWarning: Columns (6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n  db_record = pd.read_csv('D:/housingRecordAnalytics/Data/db_record_v1_230106.csv')[[\"id_f\", \"cons_text\"]] # 심층상담 데이터 읽기\n\n\n\n\n\n\n# db_record = db_record.sample(1000)\n\n\n## 한글, 숫자만 남기고 제거; 줄바꿈\ndb_record['cons_text_cleaned_1'] = list(map(lambda text: re.sub(r\"([^가-힣0-9a-z ])\", \" \", text), db_record['cons_text'].str.lower()))\n\n\n\n\n\ndict_synonyms = pd.read_csv('../data/dict/dict_synonyms.csv')\n\n## 동의어사전 적용하는 함수 정의\ndef replace_word(text):\n    for i in range(len(dict_synonyms['beforeWord'])): \n        try:\n            if dict_synonyms['beforeWord'][i] in text: # 바꿀 단어가 발견된다면\n                text = text.replace(dict_synonyms['beforeWord'][i], dict_synonyms['afterWord'][i]) # 해당하는 단어의 afterWord로 바꾸어라\n        except Exception as e:\n            print(f\"Error 발생 / 에러명: {e}\")\n            print(dict_synonyms['afterWord'][i])\n            print(text)\n    return text\n\ndb_record['cons_text_cleaned_2'] = db_record['cons_text_cleaned_1'].swifter.set_npartitions(npartitions = 12).apply(lambda x: replace_word(x))\n\n\n\n\n\n\n\n\n\n\n\n## 동의어사전에서 추출하기\ndict_synonyms = pd.read_csv('../data/dict/dict_synonyms.csv') # 동의어사전 불러오기\nlist_userDefined_synonyms = (dict_synonyms['afterWord'].str.strip().unique() + \"\\tNNG\\t9\").tolist() # 사용자 정의 사전 포맷으로 변경\n\n## 사용자 정의 사전 불러오기\ndict_add = pd.read_table(\"../Data/dict/dict_userDefined_madeByMe.txt\") # 추가 사전 불러오기\nlist_userDefined_add = (pd.read_table(\"../Data/dict/dict_userDefined_madeByMe.txt\", header = None, sep = \"-\")[0] + \"\\t9\").tolist() # 사용자 정의 사전 포맷으로 변경\n\n## 위 두 사전 합치기\ndict_userDefined = pd.DataFrame(pd.DataFrame(list_userDefined_synonyms + list_userDefined_add)[0].unique()) # 두 list 결합\ndict_userDefined.to_csv('../Data/dict/dict_userDefined.txt', index = False, header = False) # 새로운 사용자 정의 사전 저장하기\n\n\n\n\n\n## 설정\n# kiwi = Kiwi(num_workers = 0, model_type = 'sbg')\n# kiwi.load_user_dictionary('../Data/dict/dict_userDefined.txt') # 사용자사전 추가\n# kiwi.tokenize('당센터 상담 후 임대주택 입주 대상자 사례관리 물품 전달을 위해 연락 드림. -12월 17일 9시에 내방해주신다고 함.')\n\n\n## Kiwi 설정\nkiwi = Kiwi(model_type = 'sbg', typos = 'basic') # Kiwi 추가 설정\nkiwi.load_user_dictionary('../Data/dict/dict_userDefined.txt') # 사용자사전 추가\nmorph_analysis = lambda x: kiwi.tokenize(x, stopwords = Stopwords()) if type(x) is str else None # 형태소 분석\ndb_record['cons_text_posTagged_kiwi'] = db_record['cons_text_cleaned_2'].swifter.apply(morph_analysis)\n\n\n\n\n\n## 형태소분석된 것들을 join\ndict_stopword = pd.read_csv('../data/dict/dict_stopword.csv')\ndict_oneChar = pd.read_csv(\"../Data/dict/dict_oneChar.csv\")\n\n## 품사 정의하기\nlist_pos_all = (\"N\", \"V\", \"M\", \"J\", \"E\", \"X\") # 주요 품사 모두\nlist_pos_main = (\"N\", \"V\") # 명사, 동사, 형용사만\n\n## 불용어 제거하고 형태소 결합하기\ndef tokenToText(tokens):\n    textJoinedMain = []\n    textJoinedAll = [] \n    for token, pos, _, _ in tokens:        \n        if (token not in list(dict_stopword['word']) and ( len(token) > 1 or (len(token) == 1 and token in list(dict_oneChar['word']) ) )): \n            if pos.startswith('V'): token = token + '다' # 동사라면 뒤에 '다'를 붙여서 자연스럽게 만들기\n            if pos.startswith(list_pos_main) : textJoinedMain.append(token)\n            if pos.startswith(list_pos_all) : textJoinedAll.append(token)\n\n    out = pd.Series([' '.join(textJoinedAll), ' '.join(textJoinedMain)])\n    return out\n\ndb_record[['cons_text_posTagged_all', 'cons_text_posTagged_main']] = db_record['cons_text_posTagged_kiwi'].swifter.set_npartitions(npartitions = 6).apply(lambda x: tokenToText(x))\n\n\n\n\n\n\ndb_record = db_record[['id_f', 'cons_text', 'cons_text_posTagged_main']]\n\n\ndb_record.sample(frac = 0.005).to_csv('D:/housingRecordAnalytics/Data/db_record_v2_sample.csv', index = False, encoding=\"utf-8-sig\") # 1% 샘플데이터\ndb_record.to_csv('D:/housingRecordAnalytics/Data/db_record_v2_' + pd.to_datetime(\"today\").strftime(\"M%mD%d_H%HM%M\") + '.csv', index=False, encoding=\"utf-8-sig\") # 본 데이터"
  },
  {
    "objectID": "posts/housing-consultation-analysis-1/index.html",
    "href": "posts/housing-consultation-analysis-1/index.html",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "",
    "text": "서론\n공공데이터 등을 API로 공개한 경우가 최근 많아졌다. \n전국 점포 DB를 한번에 csv 파일로 다운받을 수 없고 상권이나 건물 등의 단위로 Open API를 통해 수집하도록 제공되고 있다."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Juhyeon Park",
    "section": "Education",
    "text": "Education\nUlsan National Institute of Science and Technology PhD in Urban and Environmental Engineering | 2022\nUlsan National Institute of Science and Technology B.S. in Urban and Environmental Engineering | 2015"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Juhyeon Park",
    "section": "Experience",
    "text": "Experience\nPostdoctoral Researcher at Ulsan National Institute of Science and Technology | February 2022 - present"
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html",
    "href": "posts/how-to-use-googleway-r/index.html",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "",
    "text": "구글 지도에는 도시 분석에 활용할 수 있는 다양한 정보가 등록되어 있다. 아래는 서울 연남동을 구글 지도에 검색한 결과다.\n\n이 범위 내, 음식점이 얼마나 많이 있을까? 평점이 높은 음식점은 어디에 몰려있을까? 구글 지도에 등록된 음식점, 카페와 같은 POI 정보를 수집하면 이에 답할 수 있다. 구글 API와 R을 활용하여 이 구글 지도 POI를 수집하는 방법에 대해 아래 다루고자 한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#구글-api-key-만들기",
    "href": "posts/how-to-use-googleway-r/index.html#구글-api-key-만들기",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1. 구글 API key 만들기",
    "text": "1. 구글 API key 만들기\n구글 지도에 정보를 요청하고 응답 받기 위해선 구글 API key를 만들고 설정하는 것이 필요하다.\n\n1.1. 클라우드 및 결제 설정\n\n구글 클라우드에서 콘솔을 생성한다. \n계정 정보와 본인 확인, 연락처 정보 및 결과 정보를 차례로 입력한다. \n이후, 구글 클라우드 플랫폼에서 결제 설정을 한다. \n\n\n\n1.2. API 생성 및 설정\n\n사용할 API를 생성한다. \n사용할 서비스를 활성화시켜준다. \nPlaces API 외 googleway R 패키지를 활용하기 위해서는 Geocoding API 등 자신이 원하는 기능을 설정해주어야 한다. \n\n\n\n1.3. API 키 복사\n\nR에서 사용할 구글 API key는 아래에서 복사해서 사용한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#클라우드-및-결제-설정",
    "href": "posts/how-to-use-googleway-r/index.html#클라우드-및-결제-설정",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.1. 클라우드 및 결제 설정",
    "text": "1.1. 클라우드 및 결제 설정\n\n구글 클라우드에서 콘솔을 생성한다. \n계정 정보와 본인 확인, 연락처 정보 및 결과 정보를 차례로 입력한다. \n이후, 구글 클라우드 플랫폼에서 결제 설정을 한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#api-생성-및-설정",
    "href": "posts/how-to-use-googleway-r/index.html#api-생성-및-설정",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.2. API 생성 및 설정",
    "text": "1.2. API 생성 및 설정\n\n사용할 API를 생성한다. \n사용할 서비스를 활성화시켜준다. \nPlaces API 외 googleway R 패키지를 활용하기 위해서는 Geocoding API 등 자신이 원하는 기능을 설정해주어야 한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#api-키-복사",
    "href": "posts/how-to-use-googleway-r/index.html#api-키-복사",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.3. API 키 복사",
    "text": "1.3. API 키 복사\n\nR에서 사용할 구글 API key는 아래에서 복사해서 사용한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#googleway",
    "href": "posts/how-to-use-googleway-r/index.html#googleway",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "2.1. Googleway",
    "text": "2.1. Googleway\nGoogleway은 R를 활용하여 Google API 요청과 응답 등을 도와주는 패키지다. 구글 지도 외 구글 스트리트뷰 이미지, 자전거 루트 검색 등 다양한 구글 API를 활용한 기능을 제공하며, 이 글에서는 Google Places API를 주로 활용한다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#google-places-api",
    "href": "posts/how-to-use-googleway-r/index.html#google-places-api",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "2.2. Google Places API",
    "text": "2.2. Google Places API\nGoogle Places API는 전세계 구글 지도에 등록된 POI 정보를 수집하는 데 쓰인다. 이 POI 정보는 우리가 구글 지도에서 검색하는 것과 같으며, 구글은 검색 방식을 3가지로 구분한다.\n\n\n\n\n\n\n\n\n검색 방법\n설명\n검색 예시\n\n\n\n\nText\n텍스트 검색\n마포구 공원\n\n\nNearby\n특정 장소(위도/경도) 주변 검색\n(37.557, 126.924) 주변 500m 중식집\n\n\nPlace Detail\n특정 POI에 관한 구체적인 정보\n연남동 소이연남 별점, 리뷰 수 등\n\n\n\n각 방법에 대해 Googleway로 요청하고 응답 받는 방법은 아래와 같다.\n\nText\ntext 검색은 원하는 키워드를 구글 지도에서 검색하는 것이다. 마포구 공원을 검색하는 것을 예시로 들어보자.\n\nlibrary(googleway)\n\nres <- google_places(\n  search_string = \"마포구 공원\", # 검색하는 키워드\n  key = key, # 자신의 구글 API key\n  language = \"ko\", # 한국어 설정\n  )\n\n보낸 쿼리 응답에서 장소 이름과 평균 평점을 뽑아내면 다음과 같다.\n\n> cbind(res$results$name, res$results$rating)\n      [,1]                  [,2] \n [1,] \"경의선숲길공원\"      \"4.6\"\n [2,] \"마포 어린이 공원\"    \"3.9\"\n [3,] \"서울함 공원\"         \"4.2\"\n [4,] \"노을공원\"            \"4.6\"\n [5,] \"하늘공원\"            \"4.5\"\n [6,] \"망원한강공원\"        \"4.4\"\n [7,] \"경의선숲길\"          \"4.4\"\n [8,] \"성산근린공원\"        \"4.2\"\n [9,] \"평화의공원\"          \"4.5\"\n[10,] \"월드컵공원\"          \"4.5\"\n[11,] \"경의선공원길\"        \"4.6\"\n[12,] \"한강공원 마포나들목\" \"4.3\"\n[13,] \"경의선숲길공원\"      \"4.5\"\n[14,] \"근린공원\"            \"4\"  \n[15,] \"조각공원\"            \"3.8\"\n[16,] \"와우산체육공원\"      \"4.2\"\n[17,] \"복사꽃어린이공원\"    \"3.9\"\n[18,] \"한강공원망원지구\"    \"4.2\"\n[19,] \"합정공원\"            \"3.7\"\n[20,] \"윗잔다리공원\"        \"4\"  \n\n이외에도 user_ratings_total (구글 리뷰 총 개수), formatted_address (주소), geometry.location.lat/lng (위치좌표) 등이 수집된다.\n추가로, 쿼리 응답은 상위 20개만 받을 수 있다. 그 외 데이터를 수집하기 위해서는 next_page_token을 활용하면 된다.\n\nres_next <- google_places(\n  search_string = \"마포구 공원\", # 검색하는 키워드\n  key = key, # 자신의 구글 API key\n  language = \"ko\", # 한국어 설정\n  page_token = res$next_page_token # 기존 쿼리의 next_page_token\n  )\n\n\n\nNearby\nnearby 검색은 특정 좌표 기반 검색이며, POI 유형과 주변 검색 범위 등을 설정할 수 있다. 홍대입구역(위도: 126.924, 경도: 37.557) 근처 50m 내 위치한 음식점을 예시로 들어보자.\n\n> res <- google_places(\n+   location = c(37.557, 126.924), # 홍대입구역 위치 좌표\n+   place_type = \"restaurant\", # POI type\n+   radius = 50, # 주변 N meter\n+   language = \"ko\", # 한국어\n+   key = key # 자신의 구글 API key\n+   ) \n> \n> cbind(res$results$name, res$results$rating, res$results$place_id)\n     [,1]                       [,2]  [,3]                         \n[1,] \"스시메이진 홍대점\"        \"3.5\" \"ChIJR64R9cKYfDURFdUwoHMV9QI\"\n[2,] \"PASTA e PIZZA\"            \"4\"   \"ChIJt6EGjcKYfDURFFHDTbzzr7M\"\n[3,] \"애슐리\"                   \"4.5\" \"ChIJD5kR8MKYfDURrgorWW5NDqw\"\n[4,] \"서가엔쿡 홍대입구점\"      \"4\"   \"ChIJnYYHQcGZfDURU6FbPQ2VQGU\"\n[5,] \"아비꼬 홍대입구역 EXIT점\" \"3\"   \"ChIJG-v8wraZfDURKfxX4RBsfIk\"\n\n\n\nPlace Detail\nPlace Detail 검색은 특정 POI에 대한 리뷰 정보를 수집하기 위해 활용된다. 구글에서 지정한 POI id인, place_id 기반이며, 위 예시에서 스시메이진 홍대점을 예시로 들어보자.\n\n> det <- google_place_details(\n+   place_id = \"ChIJR64R9cKYfDURFdUwoHMV9QI\", # 스시메이진 홍대점 id\n+   key = key, \n+   language = \"ko\"\n+   )\n> \n> cbind(det$result$reviews$author_name, substr(det$result$reviews$text, 1, 20))\n     [,1]              [,2]                                  \n[1,] \"김진억\"          \"평일 점심 가격대 가성비 좋다.\\n다만\" \n[2,] \"youngsun hong\"   \"개인적으로 다시 가진 않을 것 같습니\" \n[3,] \"최석하\"          \"처음 가봤는데 음식도 맛있어서 좋았습\"\n[4,] \"케이린_게임세상\" \"홍대역 바로 앞이라 그런지 가격은 좀\" \n[5,] \"불꽃의초롱이\"    \"홍대역 8번쪽에 있는 스시메이진 홍대\" \n\n\n\n\n\n\n\nImportant\n\n\n\n각 POI별 리뷰는 최대 5개까지만 응답받을 수 있다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#예제",
    "href": "posts/how-to-use-googleway-r/index.html#예제",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "예제",
    "text": "예제\ngoogelway 패키지로 구글 지도 데이터를 수집하면, 아래 질문에 답할 수 있다.\n\"서울 연남동 내 카페은 몇 개고, 리뷰 개수와 평점이 가장 높은 곳은 어디인가?\""
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#r-실습-전",
    "href": "posts/how-to-use-googleway-r/index.html#r-실습-전",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "3.1. R 실습 전",
    "text": "3.1. R 실습 전\n실습 질문은 아래와 같다.\n\"서울 연남동 내 카페은 몇 개고, 리뷰 개수와 평점이 가장 높은 곳은 어디인가?\"\n간단하게 접근하면 google_places를 사용해서 연남동 중심 좌표를 기준으로 모든 cafe POI를 수집하는 쿼리를 보내고, 그 쿼리의 next_page_token를 계속해서 넣으며 수집하면 된다.\n하지만, 구글 API에서는 한 쿼리당 60개 이상 아이템을 수집하지 못한다. (link)\n해결 방법은 다음과 같다.\n\n연남동 지역을 m (meter) 간격으로 grid 나누기\n한 grid 중심에서 n (meter) 이내 cafe POI를 수집 \n\n\n\n\n\n\n\nImportant\n\n\n\n적절한 m과 n을 설정해야 한다. 아주 작은 값은 시간이 오래걸리고 구글 API 청구 비용이 증가하며, 너무 크다면 한 grid 내 POI가 60개가 넘어가 제대로 수집되지 않을 것이다."
  },
  {
    "objectID": "posts/how-to-use-googleway-r/index.html#r-실습",
    "href": "posts/how-to-use-googleway-r/index.html#r-실습",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "3.2. R 실습",
    "text": "3.2. R 실습\n\n패키지 불러오기\n필요한 패키지를 불러오고 없다면 설치한다.\n\n# Package reading\nPackages <- c(\"data.table\", \"stringr\", \"ggplot2\", \"sf\", \"tidyr\", \"sp\", \"googleway\", \"ggmap\", \"dplyr\")\ninstall_pkgs <- function(pkgs) {\n  # 신규 패키지 설치 \n  new_pkgs <- pkgs[!(pkgs %in% installed.packages()[, \"Package\"])]\n  if (length(new_pkgs))\n    install.packages(new_pkgs, dependencies = TRUE)\n  \n  # 기존 패키지 library 불러오기\n  sapply(pkgs, require, character.only = TRUE)\n}\n\ninstall_pkgs(Packages)\nlapply(Packages, require, character.only = TRUE)\n\n## Projection\nproj_WGS84 <- CRS(\"+init=epsg:4326\") \nproj_TM <- CRS(\"+init=epsg:5186\")\n\n\n\nGrid 만들기\n본 실습은 grid 간격(m)은 100m, 검색 범위(n)는 66.67으로 설정했으며, 이유는 아래와 같다.\n\n구글 지도에서 연남동을 검색하고 카페 POI를 살펴보았을 때, 100m X 100m grid 내 60개 이상 카페 POI가 존재하지 않아보인다. 따라서 100m를 가로와 세로 변으로 하는 grid를 만든다.\n100m X 100m grid 중심점에서 검색하는 범위는 변의 반지름(50m)보다 조금 더 크면 좋을 것이다. 따라서 1/3을 더해서 66.67m (100 X (1/2) X (1 + 1/3)) 내 POI를 검색하게끔 한다.\n\n위 작업을 그림으로 나타내면 다음과 같다. \n아래는 R로 위 방식을 나타내는 것이다. 연남동 shapefile은 여기에서 다운받을 수 있다.\n\nvalue_gridInterval <- 100 # Grid 간격\nvalue_radiusSearch <-\n  value_gridInterval * (2/3) # 실제 검색 범위, 검색 단위에서 1/3 더한 값\n\nshp_bdry <- st_read(\"data/boundary_yeonnam.shp\")\n\nshp_bdry_grid <- shp_bdry %>%\n  st_make_grid(., value_gridInterval)\n\n\n\nGrid별 수집\n만든 grid는 구글 API에 활용되기 전 다음 과정을 거치고 각 grid별로 POI 정보를 수집한다.\n\nshp_bdry_grid_split <- shp_bdry_grid %>% \n  st_transform(proj_WGS84) %>% # 좌표계 변환\n  st_centroid() %>% # Grid 중심점\n  st_coordinates %>% as.data.table %>% # 중심점 좌표 정보\n  group_split(id_grid = row_number()) # 각 grid별로 list\n\ndb_1a <- rbindlist(lapply(shp_bdry_grid_split, function(pnt){\n  \n  df_places_final <- NULL\n  \n  print(pnt$id_grid)\n  \n  df_places <- googleway::google_places(\n    location = c(pnt$Y, pnt$X),\n    place_type = \"cafe\",\n    radius = value_radiusSearch,\n    language = \"ko\",\n    key = key) \n  \n  if(length(df_places$results) != 0){\n    \n    df_places_results <- df_places$results\n    geometry <- df_places_results$geometry$location\n    df_places_results <- df_places_results %>% \n      select(one_of(c(\n        \"name\", \"place_id\", \"types\", \n        \"user_ratings_total\", \"rating\", \"vicinity\", \"business_status\")))\n    df_places_results <- cbind(df_places_results, geometry)\n    \n    \n    while (!is.null(df_places$next_page_token)) {\n      print(df_places$next_page_token)\n      print(df_places$status)\n      Sys.sleep(5) # time to not overload the Google API\n      \n      df_places <- googleway::google_places(\n        location = c(pnt$Y, pnt$X),\n        place_type = \"cafe\",\n        radius = value_radiusSearch,\n        language = \"ko\",\n        page_token = df_places$next_page_token,\n        key = key) \n      \n      df_places_next <- df_places$results\n      \n      if (length(df_places_next) > 0){\n        geometry <- df_places_next$geometry$location\n        df_places_next <- df_places_next %>%\n          select(one_of(c(\n            \"name\", \"place_id\", \"types\",\n            \"user_ratings_total\", \"rating\", \"vicinity\", \"business_status\")))\n        df_places_next <- cbind(df_places_next, geometry)\n        df_places_results <- bind_rows(\n          df_places_results, df_places_next)\n      }\n      Sys.sleep(2) # time to not overload the Google API\n    }\n    \n    # df_places_final <- bind_rows(\n    #   df_places_final, df_places_results)\n    \n    df_places_final <- cbind(df_places_results, pnt)\n  } \n\n}), fill = TRUE)\n\n\n\n데이터 전처리\n수집한 데이터는 다음과 같다. 811개 카페 POI가 수집되었고, types 중 cafe가 포함된 구글 POI가 모두 수집된 것이다.\n\ndb_1a\n\n               name                    place_id\n  1:           모뎐 ChIJn7PjZ0mZfDURDGztfRvBelc\n  2:     베이글카페 ChIJV2uwPNyYfDURdLuGbg9wkCA\n  3:     커피사랑방 ChIJ6cZZMtyYfDURIPO2h_PNYzk\n  4:       카페엘리 ChIJNWPNA92YfDUR6_7knu3MWEI\n  5: (주)요거프레소 ChIJsWLtVNyYfDURZ_f71SWvPZI\n ---                                           \n807:     연희단팥죽 ChIJAUntXomffDURf4LLUJ6iQy0\n808:         부어크 ChIJc4LMR_KYfDURgwcNhxlAT7g\n809:      카페12911 ChIJaXtlR_KYfDURs4vcvYDRuIg\n810:       어굿이어 ChIJ_6t1KheZfDURH4dte1WIvgc\n811:       컬러드빈 ChIJYQt8pV6ZfDURd7CKUTlNfi8\n                                               types user_ratings_total rating\n  1:       cafe|food|point_of_interest|establishment                 10    4.5\n  2:       cafe|food|point_of_interest|establishment                  2    4.0\n  3:       cafe|food|point_of_interest|establishment                  7    4.6\n  4:       cafe|food|point_of_interest|establishment                  4    4.0\n  5:       cafe|food|point_of_interest|establishment                 NA     NA\n ---                                                                          \n807:       cafe|food|point_of_interest|establishment                 64    4.4\n808:       cafe|food|point_of_interest|establishment                  5    3.8\n809:       cafe|food|point_of_interest|establishment                  1    3.0\n810: cafe|food|point_of_interest|store|establishment                 NA     NA\n811:       cafe|food|point_of_interest|establishment                 20    4.6\n                                                vicinity business_status\n  1:                       마포구 서교동 동교로19길 52-7     OPERATIONAL\n  2:               마포구 서교동 449-21번지 동공빌라 1층     OPERATIONAL\n  3: 서교동 247-20번지 임오빌딩 1층 마포구 서울특별시 KR     OPERATIONAL\n  4:        동교동 203-10번지 102호 마포구 서울특별시 KR     OPERATIONAL\n  5:          연남동 571-10번지 4층 마포구 서울특별시 KR     OPERATIONAL\n ---                                                                    \n807:                           서대문구 연희로11가길 8-5     OPERATIONAL\n808:                               서대문구 연희동 126-9     OPERATIONAL\n809:        연희동 129-11번지 1층 서대문구 서울특별시 KR     OPERATIONAL\n810:                     서대문구 연희로11나길 7-5 지1층     OPERATIONAL\n811:                    서대문구 연희동 연희로11가길 8-8     OPERATIONAL\n          lat      lng        X        Y id_grid\n  1: 37.55785 126.9173 126.9170 37.55798       1\n  2: 37.55763 126.9172 126.9170 37.55798       1\n  3: 37.55835 126.9173 126.9170 37.55798       1\n  4: 37.55783 126.9195 126.9193 37.55798       3\n  5: 37.55780 126.9189 126.9193 37.55798       3\n ---                                            \n807: 37.56789 126.9289 126.9283 37.56790     132\n808: 37.56756 126.9287 126.9283 37.56790     132\n809: 37.56747 126.9286 126.9283 37.56790     132\n810: 37.56733 126.9283 126.9283 37.56790     132\n811: 37.56809 126.9290 126.9283 37.56790     132\n\n\n이 데이터는 전처리 과정이 필요하다.\n\n연남동을 grid로 나눌 때, 끝점을 사각형으로 인지하고 grid로 생성했으므로 연남동 내 POI만 추출\n간단하게 리뷰가 5개 이상 존재하며 영업중인 POI만 추출\n\n\ndb_1b <- db_1a %>%\n  # 영업 중이며 리뷰 5개 이상 추출\n  filter(business_status == \"OPERATIONAL\" & user_ratings_total >= 5) %>%\n  # 데이터를 sf 형태로 변환\n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = proj_WGS84) %>%\n  # 연남동 지역 내 POI만 추출\n  st_intersection(st_transform(shp_bdry, proj_WGS84)) %>%\n  # 좌표 정보 생성\n  mutate(lng = st_coordinates(.)[,1], \n         lat = st_coordinates(.)[,2]) %>%\n  # 지리정보 삭제\n  st_drop_geometry() %>% as.data.table()\n\n\n\n데이터 활용\n질문으로 돌아가보자.\n\"서울 연남동 내 카페은 몇 개고, 리뷰 개수와 평점이 가장 높은 곳은 어디인가?\"\n전처리 이후 연남동 내 카페 개수는 다음과 같다.\n\nlength(db_1b$place_id) # 필터링 후 총 개수\n\n[1] 229\n\n\n리뷰 개수가 가장 높은 곳은 이곳이다.\n\ndb_1b[order(-user_ratings_total)][1,]\n\n                name                    place_id\n1: 테일러커피 연남점 ChIJB_1mvO6YfDUR4cCrgtcLX-s\n                                       types user_ratings_total rating\n1: cafe|food|point_of_interest|establishment                727    4.2\n              vicinity business_status        X        Y id_grid    site\n1: 마포구 성미산로 189     OPERATIONAL 126.9261 37.56339      75 Yeonnam\n        lng      lat\n1: 126.9264 37.56306\n\n\n리뷰 평점이 가장 높은 곳(중에서 가장 리뷰 개수가 많은)은 이곳이다.\n\ndb_1b[order(-rating, -user_ratings_total)][1,]\n\n       name                    place_id\n1: 익명다방 ChIJ-aw70JGZfDURfvLogcyD-DQ\n                                       types user_ratings_total rating\n1: cafe|food|point_of_interest|establishment                 20      5\n                  vicinity business_status        X        Y id_grid    site\n1: 마포구 연남동 연희로 31     OPERATIONAL 126.9272 37.56159      54 Yeonnam\n        lng      lat\n1: 126.9268 37.56166\n\n\n수집한 카페 위치 분포는 아래와 같다."
  },
  {
    "objectID": "about.html#cv",
    "href": "about.html#cv",
    "title": "Juhyeon Park",
    "section": "CV",
    "text": "CV\nDownload my resumé."
  },
  {
    "objectID": "posts/2022-04-15-how-to-use-open-api/index.html",
    "href": "posts/2022-04-15-how-to-use-open-api/index.html",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "",
    "text": "공공데이터 등을 API로 공개한 경우가 최근 많아졌다. 아래는 공공데이터포털에서 상권을 검색한 결과 중 오픈 API로 제공되는 데이터 목록이다. \n첫번째 데이터의 경우, 전국 점포 DB를 한번에 csv 파일로 다운 받을 수 없다. Open API 형태로 상권이나 건물 등의 단위로 Open API를 통해 수집해야 한다."
  },
  {
    "objectID": "posts/2022-04-15-how-to-use-open-api/index.html#r를-활용한-open-api-활용하기",
    "href": "posts/2022-04-15-how-to-use-open-api/index.html#r를-활용한-open-api-활용하기",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "R를 활용한 Open API 활용하기",
    "text": "R를 활용한 Open API 활용하기\nR를 활용하여 소상공인진흥공단 상가(상권)정보 Open API를 활용하는 방법을 설명한다. 이때 다른 점은 데이터 타입을 json 형태로 응답 받는 것이다.\n\n패키지 및 작업 준비\n필요한 패키지를 먼저 불러온다.\n\n# Package reading\nPackages <- c(\"data.table\", \"httr\", \"knitr\", \"XML\", \"jsonlite\", \"dplyr\")\ninstall_pkgs <- function(pkgs) {\n  # 신규 패키지 설치 \n  new_pkgs <- pkgs[!(pkgs %in% installed.packages()[, \"Package\"])]\n  if (length(new_pkgs))\n    install.packages(new_pkgs, dependencies = TRUE)\n  \n  # 기존 패키지 library 불러오기\n  sapply(pkgs, require, character.only = TRUE)\n}\n\ninstall_pkgs(Packages)\n\n이용하고자 하는 Open API key를 입력한다.\n\n\n\n\nserviceKey <- \"\" # Key 입력\n\n\n\n예제 1: 건물단위 업소 조회\n앞서 open API 이해에서 활용한 건물단위 업소 조회를 활용해보자. #### 요청 검색창에 직접 입력하는 행위는 R에서는 아래와 같이 할 수 있다. ::: {.cell}\nreq_ex <- GET(I(\"https://apis.data.go.kr/B553077/api/open/sdsc2/storeListInBuilding?serviceKey=g6aqHarEoZ3mSMKdGDlDCAlogCuLu11s6RsGvuS%2FNLHnU0vNU1Bw9ep9wlRVLYIjQkAliRCYWe9HYE%2FLBdiGBA%3D%3D&key=3017011200113530000022216&indsLclsCd=Q&indsMclsCd=Q12&indsSclsCd=Q12A01&numOfRows=100&pageNo=1&type=json\"))\n:::\n위 요청을 R에서 구조화한 것은 다음과 같다.\n\nURL <- \"http://apis.data.go.kr/B553077/api/open/sdsc2\" # 소상공인시장진흥공단_상가(상권)정보_API\n\nex1_1a <- GET(\n  url = paste0(URL, \"/\", \"storeListInBuilding\"), # 건물 단위 상가업소 조회 서비스\n  query = \n    list(serviceKey = I(serviceKey), # 내 API 서비스 키 입력\n         key = \"3017011200113530000022216\", # 검색 대상 건물 코드\n         indsLclsCd = \"Q\", # 대분류 설정; 음식\n         indsMclsCd = \"Q12\", # 중분류 설정; 커피점/카페\n         indsSclsCd = \"Q12A01\", # 소분류 설정; 커피전문점/카페/다방\n         numOfRows = \"100\", # 최대 검색 항목 수 설정\n         pageNo = \"1\", #  페이지 설정\n         type = \"json\" # 응답 데이터 형태 설정\n         ) \n  )\n\n\n응답\n아래 코드로 json 형태로 응답된 결과를 처리한다.\n\ndir()\n\n[1] \"file\"            \"image\"           \"index.qmd\"       \"index.rmarkdown\"\n\n\n\nex1_1b <- ex1_1a %>%\n  content(as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON() \n\n\n\n\n응답한 정보로부터 API 서비스 설명과 정보를 확인하면 다음과 같다. ::: {.cell}\nex1_1b$header$description # API 서비스 설명\n\n[1] \"소상공인시장진흥공단 건물단위 상가업소정보\"\n\n::: ::: {.cell}\nex1_1b$body$items # 응답 정보\n\n   bizesId      bizesNm brchNm indsLclsCd indsLclsNm indsMclsCd  indsMclsNm\n1 16998056 아이엠일리터                 Q       음식        Q12 커피점/카페\n  indsSclsCd           indsSclsNm ksicCd          ksicNm ctprvnCd   ctprvnNm\n1     Q12A01 커피전문점/카페/다방 I56220 비알콜 음료점업       30 대전광역시\n  signguCd signguNm    adongCd adongNm    ldongCd ldongNm               lnoCd\n1    30170     서구 3017064000 둔산2동 3017011200  둔산동 3017011200113530000\n  plotSctCd plotSctNm lnoMnno lnoSlno                      lnoAdr       rdnmCd\n1         1      대지    1353         대전광역시 서구 둔산동 1353 301704298326\n                          rdnm bldMnno bldSlno                  bldMngNo bldNm\n1 대전광역시 서구 둔산로51번길      66         3017011200113530000022216      \n                          rdnmAdr oldZipcd newZipcd dongNo flrNo hoNo      lon\n1 대전광역시 서구 둔산로51번길 66   302830    35233                   127.3806\n       lat\n1 36.35413\n\n:::\n다른 응답과 요청 메세지 정보를 알고 싶다면 오퍼레이션 명세를 확인하면 된다. \n\n\n\n예제 2: 상권 내 업소 조회\n이대역 상권 내 모든 업소를 조회해보자.\n\n요청\n이대역 상권 내 모든 업소 조회를 요청하는 코드는 다음과 같다. ::: {.cell}\nURL <- \"http://apis.data.go.kr/B553077/api/open/sdsc2\" # 소상공인시장진흥공단_상가(상권)정보_API\n\nex2_1a <- GET(\n  url = paste0(URL, \"/\", \"storeListInArea\"), # 빌딩 내 업소 조회 서비스\n  query = \n    list(serviceKey = I(serviceKey), # 내 서비스 키 입력\n         key = \"9151\", # 이대역 상권번호\n         numOfRows = \"1000\", # 최대 검색 항목 수 설정\n         type = \"json\" # 응답 데이터 형태 설정\n         ) \n  )\n:::\n\n\n응답\n이때 요청한 결과는 다음과 같다. ::: {.cell}\nex2_1b <- ex2_1a %>%\n  content(as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON()  \n:::\n\n\n\n\ncbind(ex2_1b$body$items$bizesNm, ex2_1b$body$items$lnoAdr)[c(1:20), ] # 상위 20개 상호명과 주소\n\n      [,1]                     [,2]                               \n [1,] \"오피스디포\"             \"서울특별시 서대문구 대현동 60-8\"  \n [2,] \"메이퀸\"                 \"서울특별시 서대문구 대현동 56-126\"\n [3,] \"미미뷰티\"               \"서울특별시 서대문구 대현동 54-4\"  \n [4,] \"파파노다이닝돈부리\"     \"서울특별시 서대문구 대현동 56-110\"\n [5,] \"삼성전자판매이대점\"     \"서울특별시 서대문구 대현동 37-1\"  \n [6,] \"데몬헤어\"               \"서울특별시 서대문구 대현동 56-119\"\n [7,] \"파오\"                   \"서울특별시 서대문구 대현동 54-4\"  \n [8,] \"육쌈냉면\"               \"서울특별시 서대문구 대현동 34-34\" \n [9,] \"이대종합분식\"           \"서울특별시 서대문구 대현동 101-12\"\n[10,] \"네이처컬렉션이대점\"     \"서울특별시 서대문구 대현동 34-31\" \n[11,] \"삼청동궁물떡복이이대점\" \"서울특별시 서대문구 대현동 53-9\"  \n[12,] \"공차\"                   \"서울특별시 서대문구 대현동 54-1\"  \n[13,] \"올댓뷰티아카데미\"       \"서울특별시 서대문구 대현동 56-2\"  \n[14,] \"더페이스샵이대2호점\"    \"서울특별시 서대문구 대현동 37-5\"  \n[15,] \"니나키친\"               \"서울특별시 서대문구 대현동 54-6\"  \n[16,] \"BK민방경네일\"           \"서울특별시 서대문구 대현동 34-39\" \n[17,] \"지구별고양이\"           \"서울특별시 서대문구 대현동 90-30\" \n[18,] \"라비에벨헤어\"           \"서울특별시 서대문구 대현동 37-69\" \n[19,] \"다다\"                   \"서울특별시 서대문구 대현동 56-34\" \n[20,] \"109헤어\"                \"서울특별시 서대문구 대현동 40-39\" \n\n\n\n\n\n예제 3: 행정구역 단위 업소 조회\n울산 중구에 위치한 모든 업소 정보를 수집해보자.\n\n요청\n아래와 같이 요청을 해본다. ::: {.cell}\nURL <- \"http://apis.data.go.kr/B553077/api/open/sdsc2\" # 소상공인시장진흥공단_상가(상권)정보_API\n\nex3_1a <- GET(\n  url = paste0(URL, \"/\", \"storeListInDong\"), # 행정동 단위 상가업소 조회 오퍼레이션 명세\n  query = \n    list(serviceKey = I(serviceKey), # 내 서비스 키 입력\n         divId = \"signguCd\", # 시군구 행정구역 입력 설정\n         key = \"31110\", # 울산 중구 행정구역코드\n         numOfRows = \"1000\", # 최대 검색 항목 수 설정\n         type = \"json\" # 응답 데이터 형태 설정\n         ) \n  )\n:::\n\n\n응답\n응답한 결과를 보기전에, 보낸 요청 쿼리의 응답 개수를 확인해보자. ::: {.cell}\nex3_1b <- ex3_1a %>%\n  content(as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON() \n:::\n\n\n\n\nex3_1b$body$totalCount\n\n[1] 8907\n\n\n당연하게도 울산 중구에 위치한 업소 개수는 한 요청 쿼리에서 응답받을 수 있는 최대 항목인 1000개를 넘는다. 따라서 다음 1000개씩 모든 응답을 페이지를 넘어가며 수집하는 작업이 필요하고 아래 코드로 가능하다.\n\ndb_1a <- rbindlist(\n  lapply(1:ceiling(ex3_1b$body$totalCount/1000), # 페이지 번호 1부터 총 개수를 1000개로 나눈 값의 올림까지\n         function(i){\n           ex3_1b <- GET(\n             url = paste0(URL, \"/\", \"storeListInDong\"), # 행정동 단위 상가업소 조회 오퍼레이션 명세\n             query = \n               list(serviceKey = I(serviceKey), # 내 서비스 키 입력\n                    divId = \"signguCd\", # 시군구 행정구역 입력 설정\n                    key = \"31110\", # 울산 중구 행정구역코드\n                    numOfRows = \"1000\", # 최대 검색 항목 수 설정\n                    pageNo = i, # i 번째 페이지 항목 설정\n                    type = \"json\" # 응답 데이터 형태 설정\n                    ) \n             ) %>%\n             content(as = \"text\", encoding = \"UTF-8\") %>%\n             fromJSON() \n           \n           ex3_1b$body$items\n           }))\n\n\n\n\n\nlength(db_1a$bizesId) # 수집한 업소 총 개수\n\n[1] 8907\n\n\nkable(db_1a[1:3]) # 상위 3개 결과\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbizesId\nbizesNm\nbrchNm\nindsLclsCd\nindsLclsNm\nindsMclsCd\nindsMclsNm\nindsSclsCd\nindsSclsNm\nksicCd\nksicNm\nctprvnCd\nctprvnNm\nsignguCd\nsignguNm\nadongCd\nadongNm\nldongCd\nldongNm\nlnoCd\nplotSctCd\nplotSctNm\nlnoMnno\nlnoSlno\nlnoAdr\nrdnmCd\nrdnm\nbldMnno\nbldSlno\nbldMngNo\nbldNm\nrdnmAdr\noldZipcd\nnewZipcd\ndongNo\nflrNo\nhoNo\nlon\nlat\n\n\n\n\n10078174\n중앙농협하나로마트태화점\n태화점\nD\n소매\nD03\n종합소매점\nD03A02\n수퍼마켓\nG47121\n슈퍼마켓\n31\n울산광역시\n31110\n중구\n3111060000\n태화동\n3111011100\n태화동\n3111011100104730001\n1\n대지\n473\n1\n울산광역시 중구 태화동 473-1\n311103169020\n울산광역시 중구 태화로\n186\n\n3111011100104730001001410\n중앙농협태화지소\n울산광역시 중구 태화로 186\n681819\n44456\n\n1\n\n129.2961\n35.55191\n\n\n10295347\n헤펠레D.I.Y목공방남구점\n남구점\nD\n소매\nD15\n가구소매\nD15A01\n일반가구소매\nG47520\n가구 소매업\n31\n울산광역시\n31110\n중구\n3111065000\n성안동\n3111010900\n성안동\n3111010900104040002\n1\n대지\n404\n2\n울산광역시 중구 성안동 404-2\n311103169014\n울산광역시 중구 성안로\n232\n\n3111010900104040002000001\n\n울산광역시 중구 성안로 232\n681300\n44417\n\n1\n\n129.3205\n35.58005\n\n\n10536601\n예가네숯불갈비\n\nQ\n음식\nQ01\n한식\nQ01A02\n갈비/삼겹살\nI56111\n한식 음식점업\n31\n울산광역시\n31110\n중구\n3111055000\n복산2동\n3111010300\n복산동\n3111010300101950001\n1\n대지\n195\n1\n울산광역시 중구 복산동 195-1\n311104307154\n울산광역시 중구 도화골6길\n1\n\n3111010300101950001011330\n\n울산광역시 중구 도화골6길 1\n681220\n44477\n\n1\n\n129.3326\n35.56699"
  },
  {
    "objectID": "posts/2022-04-15-how-to-use-open-api/index.html#step-1-open-api-활용-신청",
    "href": "posts/2022-04-15-how-to-use-open-api/index.html#step-1-open-api-활용-신청",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 1: Open API 활용 신청",
    "text": "Step 1: Open API 활용 신청\nOpen API 예시는 공공데이터포털에서 제공하는 소상공인시장진흥공단_상가(상권)정보를 대상으로 한다. 이곳에서 먼저 해당 API 활용신청을 한다."
  },
  {
    "objectID": "posts/2022-04-15-how-to-use-open-api/index.html#step-2-요청하기",
    "href": "posts/2022-04-15-how-to-use-open-api/index.html#step-2-요청하기",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 2: 요청하기",
    "text": "Step 2: 요청하기\n신청을 완료하면 마이페이지로 이동하고, 해당 데이터 API를 클릭하고 요청 예시 중 하나인 건물 단위 상가업소 조회를 클릭하고 미리보기를 누른다."
  },
  {
    "objectID": "posts/2022-04-15-how-to-use-open-api/index.html#step-3-요청에-따른-응답보기",
    "href": "posts/2022-04-15-how-to-use-open-api/index.html#step-3-요청에-따른-응답보기",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 3: 요청에 따른 응답보기",
    "text": "Step 3: 요청에 따른 응답보기\n위의 요청에서 미리보기를 누르면 URL로 API 요청이 입력되어, URL에 따른 응답을 볼 수 있다.\n\n요청으로 만들어진 URL 주소는 세가지로 구분할 수 있다.\n\n서비스명(건물 단위 상가업소 조회)\n서비스 key\n요청 변수\n\n\n이를 자세히 설명하면,\n\nhttps://apis.data.go.kr/B553077/api/open/sdsc2/은 소상공인진흥공단 상가(상권)정보 API 주소\nstoreListInBuilding?은 건물 단위 상가업소 조회\nserviceKey=g6aqHarEo~은 부여받은 API 인증키\nkey=3017011200113530000022216&은 요청 변수 중 key(건물관리번호) 지정\nindsLclsCd=Q&은 대분류가 Q(음식)에 해당하는 것만 조회\nindsMclsCd=Q12&은 중분류가 Q12(커피점/카페)에 해당하는 것만 조회\nindsSclsCd=Q12A01&은 소분류가 Q12A01(커피전문점/카페/다방)에 해당하는 것만 조회\nnumOfRows=100&은 최대 100개 항목을 조회\npageNo=1&은 첫번째 페이지를 요청\ntype=xml은 조회를 xml 형식으로 응답"
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "",
    "text": "구글 지도에는 도시 분석에 활용할 수 있는 다양한 정보가 등록되어 있다. 아래는 서울 연남동을 구글 지도에 검색한 결과다.\n\n이 범위 내, 음식점이 얼마나 많이 있을까? 평점이 높은 음식점은 어디에 몰려있을까? 구글 지도에 등록된 음식점, 카페와 같은 POI 정보를 수집하면 이에 답할 수 있다. 구글 API와 R을 활용하여 이 구글 지도 POI를 수집하는 방법에 대해 아래 다루고자 한다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#클라우드-및-결제-설정",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#클라우드-및-결제-설정",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.1. 클라우드 및 결제 설정",
    "text": "1.1. 클라우드 및 결제 설정\n\n구글 클라우드에서 콘솔을 생성한다. \n계정 정보와 본인 확인, 연락처 정보 및 결과 정보를 차례로 입력한다. \n이후, 구글 클라우드 플랫폼에서 결제 설정을 한다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#api-생성-및-설정",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#api-생성-및-설정",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.2. API 생성 및 설정",
    "text": "1.2. API 생성 및 설정\n\n사용할 API를 생성한다. \n사용할 서비스를 활성화시켜준다. \nPlaces API 외 googleway R 패키지를 활용하기 위해서는 Geocoding API 등 자신이 원하는 기능을 설정해주어야 한다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#api-키-복사",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#api-키-복사",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "1.3. API 키 복사",
    "text": "1.3. API 키 복사\n\nR에서 사용할 구글 API key는 아래에서 복사해서 사용한다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#googleway",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#googleway",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "2.1. Googleway",
    "text": "2.1. Googleway\nGoogleway은 R를 활용하여 Google API 요청과 응답 등을 도와주는 패키지다. 구글 지도 외 구글 스트리트뷰 이미지, 자전거 루트 검색 등 다양한 구글 API를 활용한 기능을 제공하며, 이 글에서는 Google Places API를 주로 활용한다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#google-places-api",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#google-places-api",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "2.2. Google Places API",
    "text": "2.2. Google Places API\nGoogle Places API는 전세계 구글 지도에 등록된 POI 정보를 수집하는 데 쓰인다. 이 POI 정보는 우리가 구글 지도에서 검색하는 것과 같으며, 구글은 검색 방식을 3가지로 구분한다.\n\n\n\n\n\n\n\n\n검색 방법\n설명\n검색 예시\n\n\n\n\nText\n텍스트 검색\n마포구 공원\n\n\nNearby\n특정 장소(위도/경도) 주변 검색\n(37.557, 126.924) 주변 500m 중식집\n\n\nPlace Detail\n특정 POI에 관한 구체적인 정보\n연남동 소이연남 별점, 리뷰 수 등\n\n\n\n각 방법에 대해 Googleway로 요청하고 응답 받는 방법은 아래와 같다.\n\nText\ntext 검색은 원하는 키워드를 구글 지도에서 검색하는 것이다. 마포구 공원을 검색하는 것을 예시로 들어보자.\n\nlibrary(googleway)\n\nres <- google_places(\n  search_string = \"마포구 공원\", # 검색하는 키워드\n  key = key, # 자신의 구글 API key\n  language = \"ko\", # 한국어 설정\n  )\n\n보낸 쿼리 응답에서 장소 이름과 평균 평점을 뽑아내면 다음과 같다.\n\n> cbind(res$results$name, res$results$rating)\n      [,1]                  [,2] \n [1,] \"경의선숲길공원\"      \"4.6\"\n [2,] \"마포 어린이 공원\"    \"3.9\"\n [3,] \"서울함 공원\"         \"4.2\"\n [4,] \"노을공원\"            \"4.6\"\n [5,] \"하늘공원\"            \"4.5\"\n [6,] \"망원한강공원\"        \"4.4\"\n [7,] \"경의선숲길\"          \"4.4\"\n [8,] \"성산근린공원\"        \"4.2\"\n [9,] \"평화의공원\"          \"4.5\"\n[10,] \"월드컵공원\"          \"4.5\"\n[11,] \"경의선공원길\"        \"4.6\"\n[12,] \"한강공원 마포나들목\" \"4.3\"\n[13,] \"경의선숲길공원\"      \"4.5\"\n[14,] \"근린공원\"            \"4\"  \n[15,] \"조각공원\"            \"3.8\"\n[16,] \"와우산체육공원\"      \"4.2\"\n[17,] \"복사꽃어린이공원\"    \"3.9\"\n[18,] \"한강공원망원지구\"    \"4.2\"\n[19,] \"합정공원\"            \"3.7\"\n[20,] \"윗잔다리공원\"        \"4\"  \n\n이외에도 user_ratings_total (구글 리뷰 총 개수), formatted_address (주소), geometry.location.lat/lng (위치좌표) 등이 수집된다.\n추가로, 쿼리 응답은 상위 20개만 받을 수 있다. 그 외 데이터를 수집하기 위해서는 next_page_token을 활용하면 된다.\n\nres_next <- google_places(\n  search_string = \"마포구 공원\", # 검색하는 키워드\n  key = key, # 자신의 구글 API key\n  language = \"ko\", # 한국어 설정\n  page_token = res$next_page_token # 기존 쿼리의 next_page_token\n  )\n\n\n\nNearby\nnearby 검색은 특정 좌표 기반 검색이며, POI 유형과 주변 검색 범위 등을 설정할 수 있다. 홍대입구역(위도: 126.924, 경도: 37.557) 근처 50m 내 위치한 음식점을 예시로 들어보자.\n\n> res <- google_places(\n+   location = c(37.557, 126.924), # 홍대입구역 위치 좌표\n+   place_type = \"restaurant\", # POI type\n+   radius = 50, # 주변 N meter\n+   language = \"ko\", # 한국어\n+   key = key # 자신의 구글 API key\n+   ) \n> \n> cbind(res$results$name, res$results$rating, res$results$place_id)\n     [,1]                       [,2]  [,3]                         \n[1,] \"스시메이진 홍대점\"        \"3.5\" \"ChIJR64R9cKYfDURFdUwoHMV9QI\"\n[2,] \"PASTA e PIZZA\"            \"4\"   \"ChIJt6EGjcKYfDURFFHDTbzzr7M\"\n[3,] \"애슐리\"                   \"4.5\" \"ChIJD5kR8MKYfDURrgorWW5NDqw\"\n[4,] \"서가엔쿡 홍대입구점\"      \"4\"   \"ChIJnYYHQcGZfDURU6FbPQ2VQGU\"\n[5,] \"아비꼬 홍대입구역 EXIT점\" \"3\"   \"ChIJG-v8wraZfDURKfxX4RBsfIk\"\n\n\n\nPlace Detail\nPlace Detail 검색은 특정 POI에 대한 리뷰 정보를 수집하기 위해 활용된다. 구글에서 지정한 POI id인, place_id 기반이며, 위 예시에서 스시메이진 홍대점을 예시로 들어보자.\n\n> det <- google_place_details(\n+   place_id = \"ChIJR64R9cKYfDURFdUwoHMV9QI\", # 스시메이진 홍대점 id\n+   key = key, \n+   language = \"ko\"\n+   )\n> \n> cbind(det$result$reviews$author_name, substr(det$result$reviews$text, 1, 20))\n     [,1]              [,2]                                  \n[1,] \"김진억\"          \"평일 점심 가격대 가성비 좋다.\\n다만\" \n[2,] \"youngsun hong\"   \"개인적으로 다시 가진 않을 것 같습니\" \n[3,] \"최석하\"          \"처음 가봤는데 음식도 맛있어서 좋았습\"\n[4,] \"케이린_게임세상\" \"홍대역 바로 앞이라 그런지 가격은 좀\" \n[5,] \"불꽃의초롱이\"    \"홍대역 8번쪽에 있는 스시메이진 홍대\" \n\n\n\n\n\n\n\nImportant\n\n\n\n각 POI별 리뷰는 최대 5개까지만 응답받을 수 있다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#r-실습-전",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#r-실습-전",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "3.1. R 실습 전",
    "text": "3.1. R 실습 전\n실습 질문은 아래와 같다.\n\"서울 연남동 내 카페은 몇 개고, 리뷰 개수와 평점이 가장 높은 곳은 어디인가?\"\n간단하게 접근하면 google_places를 사용해서 연남동 중심 좌표를 기준으로 모든 cafe POI를 수집하는 쿼리를 보내고, 그 쿼리의 next_page_token를 계속해서 넣으며 수집하면 된다.\n하지만, 구글 API에서는 한 쿼리당 60개 이상 아이템을 수집하지 못한다. (link)\n해결 방법은 다음과 같다.\n\n연남동 지역을 m (meter) 간격으로 grid 나누기\n한 grid 중심에서 n (meter) 이내 cafe POI를 수집 \n\n\n\n\n\n\n\nImportant\n\n\n\n적절한 m과 n을 설정해야 한다. 아주 작은 값은 시간이 오래걸리고 구글 API 청구 비용이 증가하며, 너무 크다면 한 grid 내 POI가 60개가 넘어가 제대로 수집되지 않을 것이다."
  },
  {
    "objectID": "posts/2023-01-15-how-to-use-googleway-r/index.html#r-실습",
    "href": "posts/2023-01-15-how-to-use-googleway-r/index.html#r-실습",
    "title": "R를 활용하여 구글 지도 데이터 수집하기",
    "section": "3.2. R 실습",
    "text": "3.2. R 실습\n\n패키지 불러오기\n필요한 패키지를 불러오고 없다면 설치한다.\n\n# Package reading\nPackages <- c(\"data.table\", \"stringr\", \"ggplot2\", \"sf\", \"tidyr\", \"sp\", \"googleway\", \"ggmap\", \"dplyr\")\ninstall_pkgs <- function(pkgs) {\n  # 신규 패키지 설치 \n  new_pkgs <- pkgs[!(pkgs %in% installed.packages()[, \"Package\"])]\n  if (length(new_pkgs))\n    install.packages(new_pkgs, dependencies = TRUE)\n  \n  # 기존 패키지 library 불러오기\n  sapply(pkgs, require, character.only = TRUE)\n}\n\ninstall_pkgs(Packages)\nlapply(Packages, require, character.only = TRUE)\n\n## Projection\nproj_WGS84 <- CRS(\"+init=epsg:4326\") \nproj_TM <- CRS(\"+init=epsg:5186\")\n\n\n\nGrid 만들기\n본 실습은 grid 간격(m)은 100m, 검색 범위(n)는 66.67으로 설정했으며, 이유는 아래와 같다.\n\n구글 지도에서 연남동을 검색하고 카페 POI를 살펴보았을 때, 100m X 100m grid 내 60개 이상 카페 POI가 존재하지 않아보인다. 따라서 100m를 가로와 세로 변으로 하는 grid를 만든다.\n100m X 100m grid 중심점에서 검색하는 범위는 변의 반지름(50m)보다 조금 더 크면 좋을 것이다. 따라서 1/3을 더해서 66.67m (100 X (1/2) X (1 + 1/3)) 내 POI를 검색하게끔 한다.\n\n위 작업을 그림으로 나타내면 다음과 같다. \n아래는 R로 위 방식을 나타내는 것이다. 연남동 shapefile은 여기에서 다운받을 수 있다.\n\nvalue_gridInterval <- 100 # Grid 간격\nvalue_radiusSearch <-\n  value_gridInterval * (2/3) # 실제 검색 범위, 검색 단위에서 1/3 더한 값\n\nshp_bdry <- st_read(\"data/boundary_yeonnam.shp\")\n\nshp_bdry_grid <- shp_bdry %>%\n  st_make_grid(., value_gridInterval)\n\n\n\nGrid별 수집\n만든 grid는 구글 API에 활용되기 전 다음 과정을 거치고 각 grid별로 POI 정보를 수집한다.\n\nshp_bdry_grid_split <- shp_bdry_grid %>% \n  st_transform(proj_WGS84) %>% # 좌표계 변환\n  st_centroid() %>% # Grid 중심점\n  st_coordinates %>% as.data.table %>% # 중심점 좌표 정보\n  group_split(id_grid = row_number()) # 각 grid별로 list\n\ndb_1a <- rbindlist(lapply(shp_bdry_grid_split, function(pnt){\n  \n  df_places_final <- NULL\n  \n  print(pnt$id_grid)\n  \n  df_places <- googleway::google_places(\n    location = c(pnt$Y, pnt$X),\n    place_type = \"cafe\",\n    radius = value_radiusSearch,\n    language = \"ko\",\n    key = key) \n  \n  if(length(df_places$results) != 0){\n    \n    df_places_results <- df_places$results\n    geometry <- df_places_results$geometry$location\n    df_places_results <- df_places_results %>% \n      select(one_of(c(\n        \"name\", \"place_id\", \"types\", \n        \"user_ratings_total\", \"rating\", \"vicinity\", \"business_status\")))\n    df_places_results <- cbind(df_places_results, geometry)\n    \n    \n    while (!is.null(df_places$next_page_token)) {\n      print(df_places$next_page_token)\n      print(df_places$status)\n      Sys.sleep(5) # time to not overload the Google API\n      \n      df_places <- googleway::google_places(\n        location = c(pnt$Y, pnt$X),\n        place_type = \"cafe\",\n        radius = value_radiusSearch,\n        language = \"ko\",\n        page_token = df_places$next_page_token,\n        key = key) \n      \n      df_places_next <- df_places$results\n      \n      if (length(df_places_next) > 0){\n        geometry <- df_places_next$geometry$location\n        df_places_next <- df_places_next %>%\n          select(one_of(c(\n            \"name\", \"place_id\", \"types\",\n            \"user_ratings_total\", \"rating\", \"vicinity\", \"business_status\")))\n        df_places_next <- cbind(df_places_next, geometry)\n        df_places_results <- bind_rows(\n          df_places_results, df_places_next)\n      }\n      Sys.sleep(2) # time to not overload the Google API\n    }\n    \n    # df_places_final <- bind_rows(\n    #   df_places_final, df_places_results)\n    \n    df_places_final <- cbind(df_places_results, pnt)\n  } \n\n}), fill = TRUE)\n\n\n\n데이터 전처리\n수집한 데이터는 다음과 같다. 811개 카페 POI가 수집되었고, types 중 cafe가 포함된 구글 POI가 모두 수집된 것이다.\n\ndb_1a\n\n               name                    place_id\n  1:           모뎐 ChIJn7PjZ0mZfDURDGztfRvBelc\n  2:     베이글카페 ChIJV2uwPNyYfDURdLuGbg9wkCA\n  3:     커피사랑방 ChIJ6cZZMtyYfDURIPO2h_PNYzk\n  4:       카페엘리 ChIJNWPNA92YfDUR6_7knu3MWEI\n  5: (주)요거프레소 ChIJsWLtVNyYfDURZ_f71SWvPZI\n ---                                           \n807:     연희단팥죽 ChIJAUntXomffDURf4LLUJ6iQy0\n808:         부어크 ChIJc4LMR_KYfDURgwcNhxlAT7g\n809:      카페12911 ChIJaXtlR_KYfDURs4vcvYDRuIg\n810:       어굿이어 ChIJ_6t1KheZfDURH4dte1WIvgc\n811:       컬러드빈 ChIJYQt8pV6ZfDURd7CKUTlNfi8\n                                               types user_ratings_total rating\n  1:       cafe|food|point_of_interest|establishment                 10    4.5\n  2:       cafe|food|point_of_interest|establishment                  2    4.0\n  3:       cafe|food|point_of_interest|establishment                  7    4.6\n  4:       cafe|food|point_of_interest|establishment                  4    4.0\n  5:       cafe|food|point_of_interest|establishment                 NA     NA\n ---                                                                          \n807:       cafe|food|point_of_interest|establishment                 64    4.4\n808:       cafe|food|point_of_interest|establishment                  5    3.8\n809:       cafe|food|point_of_interest|establishment                  1    3.0\n810: cafe|food|point_of_interest|store|establishment                 NA     NA\n811:       cafe|food|point_of_interest|establishment                 20    4.6\n                                                vicinity business_status\n  1:                       마포구 서교동 동교로19길 52-7     OPERATIONAL\n  2:               마포구 서교동 449-21번지 동공빌라 1층     OPERATIONAL\n  3: 서교동 247-20번지 임오빌딩 1층 마포구 서울특별시 KR     OPERATIONAL\n  4:        동교동 203-10번지 102호 마포구 서울특별시 KR     OPERATIONAL\n  5:          연남동 571-10번지 4층 마포구 서울특별시 KR     OPERATIONAL\n ---                                                                    \n807:                           서대문구 연희로11가길 8-5     OPERATIONAL\n808:                               서대문구 연희동 126-9     OPERATIONAL\n809:        연희동 129-11번지 1층 서대문구 서울특별시 KR     OPERATIONAL\n810:                     서대문구 연희로11나길 7-5 지1층     OPERATIONAL\n811:                    서대문구 연희동 연희로11가길 8-8     OPERATIONAL\n          lat      lng        X        Y id_grid\n  1: 37.55785 126.9173 126.9170 37.55798       1\n  2: 37.55763 126.9172 126.9170 37.55798       1\n  3: 37.55835 126.9173 126.9170 37.55798       1\n  4: 37.55783 126.9195 126.9193 37.55798       3\n  5: 37.55780 126.9189 126.9193 37.55798       3\n ---                                            \n807: 37.56789 126.9289 126.9283 37.56790     132\n808: 37.56756 126.9287 126.9283 37.56790     132\n809: 37.56747 126.9286 126.9283 37.56790     132\n810: 37.56733 126.9283 126.9283 37.56790     132\n811: 37.56809 126.9290 126.9283 37.56790     132\n\n\n이 데이터는 전처리 과정이 필요하다.\n\n연남동을 grid로 나눌 때, 끝점을 사각형으로 인지하고 grid로 생성했으므로 연남동 내 POI만 추출\n간단하게 리뷰가 5개 이상 존재하며 영업중인 POI만 추출\n\n\ndb_1b <- db_1a %>%\n  # 영업 중이며 리뷰 5개 이상 추출\n  filter(business_status == \"OPERATIONAL\" & user_ratings_total >= 5) %>%\n  # 데이터를 sf 형태로 변환\n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = proj_WGS84) %>%\n  # 연남동 지역 내 POI만 추출\n  st_intersection(st_transform(shp_bdry, proj_WGS84)) %>%\n  # 좌표 정보 생성\n  mutate(lng = st_coordinates(.)[,1], \n         lat = st_coordinates(.)[,2]) %>%\n  # 지리정보 삭제\n  st_drop_geometry() %>% as.data.table()\n\n\n\n데이터 활용\n질문으로 돌아가보자.\n\"서울 연남동 내 카페은 몇 개고, 리뷰 개수와 평점이 가장 높은 곳은 어디인가?\"\n전처리 이후 연남동 내 카페 개수는 다음과 같다.\n\nlength(db_1b$place_id) # 필터링 후 총 개수\n\n[1] 229\n\n\n리뷰 개수가 가장 높은 곳은 이곳이다.\n\ndb_1b[order(-user_ratings_total)][1,]\n\n                name                    place_id\n1: 테일러커피 연남점 ChIJB_1mvO6YfDUR4cCrgtcLX-s\n                                       types user_ratings_total rating\n1: cafe|food|point_of_interest|establishment                727    4.2\n              vicinity business_status        X        Y id_grid    site\n1: 마포구 성미산로 189     OPERATIONAL 126.9261 37.56339      75 Yeonnam\n        lng      lat\n1: 126.9264 37.56306\n\n\n리뷰 평점이 가장 높은 곳(중에서 가장 리뷰 개수가 많은)은 이곳이다.\n\ndb_1b[order(-rating, -user_ratings_total)][1,]\n\n       name                    place_id\n1: 익명다방 ChIJ-aw70JGZfDURfvLogcyD-DQ\n                                       types user_ratings_total rating\n1: cafe|food|point_of_interest|establishment                 20      5\n                  vicinity business_status        X        Y id_grid    site\n1: 마포구 연남동 연희로 31     OPERATIONAL 126.9272 37.56159      54 Yeonnam\n        lng      lat\n1: 126.9268 37.56166\n\n\n수집한 카페 위치 분포는 아래와 같다."
  },
  {
    "objectID": "posts/2023-02-11-how-to-use-open-api/index.html",
    "href": "posts/2023-02-11-how-to-use-open-api/index.html",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "",
    "text": "공공데이터 등을 API로 공개한 경우가 최근 많아졌다. 아래는 공공데이터포털에서 상권을 검색한 결과 중 오픈 API로 제공되는 데이터 목록이다. \n첫번째 데이터의 경우, 전국 점포 DB를 한번에 csv 파일로 다운 받을 수 없다. Open API 형태로 상권이나 건물 등의 단위로 Open API를 통해 수집해야 한다."
  },
  {
    "objectID": "posts/2023-02-11-how-to-use-open-api/index.html#step-1-open-api-활용-신청",
    "href": "posts/2023-02-11-how-to-use-open-api/index.html#step-1-open-api-활용-신청",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 1: Open API 활용 신청",
    "text": "Step 1: Open API 활용 신청\nOpen API 예시는 공공데이터포털에서 제공하는 소상공인시장진흥공단_상가(상권)정보를 대상으로 한다. 이곳에서 먼저 해당 API 활용신청을 한다."
  },
  {
    "objectID": "posts/2023-02-11-how-to-use-open-api/index.html#step-2-요청하기",
    "href": "posts/2023-02-11-how-to-use-open-api/index.html#step-2-요청하기",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 2: 요청하기",
    "text": "Step 2: 요청하기\n신청을 완료하면 마이페이지로 이동하고, 해당 데이터 API를 클릭하고 요청 예시 중 하나인 건물 단위 상가업소 조회를 클릭하고 미리보기를 누른다."
  },
  {
    "objectID": "posts/2023-02-11-how-to-use-open-api/index.html#step-3-요청에-따른-응답보기",
    "href": "posts/2023-02-11-how-to-use-open-api/index.html#step-3-요청에-따른-응답보기",
    "title": "R를 활용하여 Open API로 공개된 데이터 수집하기",
    "section": "Step 3: 요청에 따른 응답보기",
    "text": "Step 3: 요청에 따른 응답보기\n위의 요청에서 미리보기를 누르면 URL로 API 요청이 입력되어, URL에 따른 응답을 볼 수 있다.\n\n요청으로 만들어진 URL 주소는 세가지로 구분할 수 있다.\n\n서비스명(건물 단위 상가업소 조회)\n서비스 key\n요청 변수\n\n\n이를 자세히 설명하면,\n\nhttps://apis.data.go.kr/B553077/api/open/sdsc2/은 소상공인진흥공단 상가(상권)정보 API 주소\nstoreListInBuilding?은 건물 단위 상가업소 조회\nserviceKey=g6aqHarEo~은 부여받은 API 인증키\nkey=3017011200113530000022216&은 요청 변수 중 key(건물관리번호) 지정\nindsLclsCd=Q&은 대분류가 Q(음식)에 해당하는 것만 조회\nindsMclsCd=Q12&은 중분류가 Q12(커피점/카페)에 해당하는 것만 조회\nindsSclsCd=Q12A01&은 소분류가 Q12A01(커피전문점/카페/다방)에 해당하는 것만 조회\nnumOfRows=100&은 최대 100개 항목을 조회\npageNo=1&은 첫번째 페이지를 요청\ntype=xml은 조회를 xml 형식으로 응답"
  }
]